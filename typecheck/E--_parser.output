Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_UMINUS
   TOK_LBRACK
   TOK_RBRACK
   TOK_QMARK
   TOK_BREAK
   TOK_BIT
   TOK_ENUM
   TOK_LONG
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_DOT


State 18 conflicts: 1 shift/reduce
State 57 conflicts: 1 reduce/reduce
State 72 conflicts: 1 shift/reduce
State 119 conflicts: 18 shift/reduce
State 151 conflicts: 1 shift/reduce
State 167 conflicts: 1 shift/reduce


Grammar

    0 $accept: specification $end

    1 specification: ifc_decl_star
    2              | ifc_decl_star rule_list

    3 ifc_decl_star: /* empty */
    4              | ifc_decl_star ifc_decl
    5              | ifc_decl_star error TOK_SEMICOLON

    6 rule_list: rule
    7          | rule_list rule
    8          | rule_list error TOK_SEMICOLON

    9 rule: event_pattern TOK_ARROW rule_body1
   10     | event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON
   11     | event_pattern error rule_body1

   12 ifc_decl: TOK_SEMICOLON
   13         | function_decl
   14         | variable_decl
   15         | event_decl
   16         | class_decl

   17 class_decl: TOK_CLASS TOK_IDENT
   18           | TOK_CLASS error TOK_SEMICOLON

   19 event_pattern: primitive_pat
   20              | TOK_LPAREN event_pattern TOK_RPAREN
   21              | event_pattern TOK_COLON event_pattern
   22              | event_pattern TOK_PAT_OR event_pattern
   23              | event_pattern TOK_PAT_STAR
   24              | TOK_NOT event_pattern

   25 rule_body1: stmt

   26 function_decl: function_header formalparamlistpp funcbody
   27              | function_header error TOK_SEMICOLON

   28 variable_decl: type vlist TOK_SEMICOLON
   29              | type vlist error TOK_SEMICOLON
   30              | type vlist TOK_COMMA error
   31              | type error TOK_SEMICOLON
   32              | TOK_IDENT error TOK_SEMICOLON

   33 vlist: vname
   34      | vlist TOK_COMMA vname

   35 vname: TOK_IDENT
   36      | TOK_IDENT TOK_ASSIGN expr

   37 event_decl: event_decl_hdr formalparamlistpp

   38 event_decl_hdr: TOK_EVENT TOK_IDENT

   39 primitive_pat: event
   40              | event TOK_BITOR expr

   41 event: TOK_ANY
   42      | TOK_IDENT evenparamlistpp

   43 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN

   44 evenparamlist: /* empty */
   45              | TOK_IDENT
   46              | evenparamlist TOK_COMMA TOK_IDENT

   47 stmt: TOK_SEMICOLON
   48     | function_invocation
   49     | asg_stmt
   50     | TOK_LBRACE stmt_plus TOK_RBRACE
   51     | if_then_else_stmt
   52     | ret_stmt
   53     | TOK_WHILE expr stmt
   54     | prt_expr TOK_SEMICOLON

   55 ret_stmt: TOK_RETURN expr

   56 stmt_plus: stmt
   57          | stmt_plus stmt
   58          | stmt_plus error stmt

   59 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt
   60                  | TOK_IF expr stmt
   61                  | TOK_IF error stmt
   62                  | TOK_IF expr error stmt
   63                  | TOK_IF expr stmt TOK_ELSE error TOK_SEMICOLON

   64 asg_stmt: ref_expr TOK_ASSIGN expr
   65         | ref_expr TOK_ASSIGN error TOK_SEMICOLON

   66 ref_expr: TOK_IDENT

   67 function_invocation: TOK_IDENT funcinvolistpp

   68 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN

   69 expr_list: /* empty */
   70          | expr_plus

   71 expr_plus: expr
   72          | expr_plus TOK_COMMA expr

   73 function_header: type TOK_IDENT

   74 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN

   75 funcbody: /* empty */
   76         | TOK_LBRACE fun_rest TOK_RBRACE

   77 fun_rest: stmt_plus
   78         | variable_decl stmt_plus
   79         | variable_decl error

   80 expr: literal
   81     | prt_expr
   82     | ref_expr
   83     | asg_stmt
   84     | function_invocation
   85     | TOK_BITNOT expr
   86     | TOK_MINUS expr
   87     | TOK_LPAREN expr TOK_RPAREN
   88     | TOK_NOT expr
   89     | expr TOK_BITXOR expr
   90     | expr TOK_SHL expr
   91     | expr TOK_LE expr
   92     | expr TOK_LT expr
   93     | expr TOK_EQ expr
   94     | expr TOK_GE expr
   95     | expr TOK_SHR expr
   96     | expr TOK_GT expr
   97     | expr TOK_OR expr
   98     | expr TOK_BITOR expr
   99     | expr TOK_MINUS expr
  100     | expr TOK_NE expr
  101     | expr TOK_DIV expr
  102     | expr TOK_MULT expr
  103     | expr TOK_BITAND expr
  104     | expr TOK_AND expr
  105     | expr TOK_MOD expr
  106     | expr TOK_PLUS expr

  107 prt_expr: TOK_PRINT expr

  108 literal: TOK_UINTNUM
  109        | TOK_DOUBLENUM
  110        | TOK_STRCONST
  111        | TOK_TRUE
  112        | TOK_FALSE

  113 formal_param_list: /* empty */
  114                  | formal_param_plus

  115 formal_param_plus: formal_param
  116                  | formal_param_plus TOK_COMMA formal_param

  117 formal_param: type TOK_IDENT

  118 type: baseType
  119     | TOK_UNSIGNED baseType
  120     | TOK_IDENT

  121 baseType: TOK_INT
  122         | TOK_BOOL
  123         | TOK_DOUBLE
  124         | TOK_VOID
  125         | TOK_STRING
  126         | TOK_BYTE


Terminals, with rules where they appear

$end (0) 0
error (256) 5 8 11 18 27 29 30 31 32 58 61 62 63 65 79
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 23
TOK_PAT_OR (260) 22
TOK_PAT_NOT (261)
TOK_PLUS (262) 106
TOK_MINUS (263) 86 99
TOK_UMINUS (264)
TOK_MULT (265) 102
TOK_DIV (266) 101
TOK_MOD (267) 105
TOK_BITAND (268) 103
TOK_BITOR (269) 40 98
TOK_BITNOT (270) 85
TOK_BITXOR (271) 89
TOK_SHL (272) 90
TOK_SHR (273) 95
TOK_GT (274) 96
TOK_LT (275) 92
TOK_GE (276) 94
TOK_LE (277) 91
TOK_EQ (278) 93
TOK_NE (279) 100
TOK_AND (280) 104
TOK_OR (281) 97
TOK_NOT (282) 24 88
TOK_COMMA (283) 30 34 46 72 116
TOK_ASSIGN (284) 36 64 65
TOK_SEMICOLON (285) 5 8 10 12 18 27 28 29 31 32 47 54 63 65
TOK_COLON (286) 21
TOK_ARROW (287) 9 10
TOK_LBRACE (288) 50 76
TOK_RBRACE (289) 50 76
TOK_LPAREN (290) 20 43 68 74 87
TOK_RPAREN (291) 20 43 68 74 87
TOK_LBRACK (292)
TOK_RBRACK (293)
TOK_QMARK (294)
TOK_IF (295) 59 60 61 62 63
TOK_ELSE (296) 59 63
TOK_CLASS (297) 17 18
TOK_RETURN (298) 55
TOK_EVENT (299) 38
TOK_ANY (300) 41
TOK_PRINT (301) 107
TOK_WHILE (302) 53
TOK_BREAK (303)
TOK_UINTNUM (304) 108
TOK_DOUBLENUM (305) 109
TOK_VOID (306) 124
TOK_STRING (307) 125
TOK_STRCONST (308) 110
TOK_BIT (309)
TOK_ENUM (310)
TOK_LONG (311)
TOK_INT (312) 121
TOK_UNSIGNED (313) 119
TOK_BOOL (314) 122
TOK_BYTE (315) 126
TOK_DOUBLE (316) 123
TOK_SHORT (317)
TOK_TRUE (318) 111
TOK_FALSE (319) 112
TOK_IDENT (320) 17 32 35 36 38 42 45 46 66 67 73 117 120
TOK_DOUBLE_COLON (321)
TOK_DOT (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
specification (69)
    on left: 1 2, on right: 0
ifc_decl_star (70)
    on left: 3 4 5, on right: 1 2 4 5
rule_list (71)
    on left: 6 7 8, on right: 2 7 8
rule (72)
    on left: 9 10 11, on right: 6 7
ifc_decl (73)
    on left: 12 13 14 15 16, on right: 4
class_decl (74)
    on left: 17 18, on right: 16
event_pattern (75)
    on left: 19 20 21 22 23 24, on right: 9 10 11 20 21 22 23 24
rule_body1 (76)
    on left: 25, on right: 9 10 11
function_decl (77)
    on left: 26 27, on right: 13
variable_decl (78)
    on left: 28 29 30 31 32, on right: 14 78 79
vlist (79)
    on left: 33 34, on right: 28 29 30 34
vname (80)
    on left: 35 36, on right: 33 34
event_decl (81)
    on left: 37, on right: 15
event_decl_hdr (82)
    on left: 38, on right: 37
primitive_pat (83)
    on left: 39 40, on right: 19
event (84)
    on left: 41 42, on right: 39 40
evenparamlistpp (85)
    on left: 43, on right: 42
evenparamlist (86)
    on left: 44 45 46, on right: 43 46
stmt (87)
    on left: 47 48 49 50 51 52 53 54, on right: 25 53 56 57 58 59 60
    61 62 63
ret_stmt (88)
    on left: 55, on right: 52
stmt_plus (89)
    on left: 56 57 58, on right: 50 57 58 77 78
if_then_else_stmt (90)
    on left: 59 60 61 62 63, on right: 51
asg_stmt (91)
    on left: 64 65, on right: 49 83
ref_expr (92)
    on left: 66, on right: 64 65 82
function_invocation (93)
    on left: 67, on right: 48 84
funcinvolistpp (94)
    on left: 68, on right: 67
expr_list (95)
    on left: 69 70, on right: 68
expr_plus (96)
    on left: 71 72, on right: 70 72
function_header (97)
    on left: 73, on right: 26 27
formalparamlistpp (98)
    on left: 74, on right: 26 37
funcbody (99)
    on left: 75 76, on right: 26
fun_rest (100)
    on left: 77 78 79, on right: 76
expr (101)
    on left: 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97
    98 99 100 101 102 103 104 105 106, on right: 36 40 53 55 59 60
    62 63 64 71 72 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
    101 102 103 104 105 106 107
prt_expr (102)
    on left: 107, on right: 54 81
literal (103)
    on left: 108 109 110 111 112, on right: 80
formal_param_list (104)
    on left: 113 114, on right: 74
formal_param_plus (105)
    on left: 115 116, on right: 114 116
formal_param (106)
    on left: 117, on right: 115 116
type (107)
    on left: 118 119 120, on right: 28 29 30 31 73 117
baseType (108)
    on left: 121 122 123 124 125 126, on right: 118 119


state 0

    0 $accept: . specification $end

    $default  reduce using rule 3 (ifc_decl_star)

    specification  go to state 1
    ifc_decl_star  go to state 2


state 1

    0 $accept: specification . $end

    $end  shift, and go to state 3


state 2

    1 specification: ifc_decl_star .
    2              | ifc_decl_star . rule_list
    4 ifc_decl_star: ifc_decl_star . ifc_decl
    5              | ifc_decl_star . error TOK_SEMICOLON

    error          shift, and go to state 4
    TOK_NOT        shift, and go to state 5
    TOK_SEMICOLON  shift, and go to state 6
    TOK_LPAREN     shift, and go to state 7
    TOK_CLASS      shift, and go to state 8
    TOK_EVENT      shift, and go to state 9
    TOK_ANY        shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 18

    $end  reduce using rule 1 (specification)

    rule_list        go to state 19
    rule             go to state 20
    ifc_decl         go to state 21
    class_decl       go to state 22
    event_pattern    go to state 23
    function_decl    go to state 24
    variable_decl    go to state 25
    event_decl       go to state 26
    event_decl_hdr   go to state 27
    primitive_pat    go to state 28
    event            go to state 29
    function_header  go to state 30
    type             go to state 31
    baseType         go to state 32


state 3

    0 $accept: specification $end .

    $default  accept


state 4

    5 ifc_decl_star: ifc_decl_star error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 33


state 5

   24 event_pattern: TOK_NOT . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 35
    primitive_pat  go to state 28
    event          go to state 29


state 6

   12 ifc_decl: TOK_SEMICOLON .

    $default  reduce using rule 12 (ifc_decl)


state 7

   20 event_pattern: TOK_LPAREN . event_pattern TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 36
    primitive_pat  go to state 28
    event          go to state 29


state 8

   17 class_decl: TOK_CLASS . TOK_IDENT
   18           | TOK_CLASS . error TOK_SEMICOLON

    error      shift, and go to state 37
    TOK_IDENT  shift, and go to state 38


state 9

   38 event_decl_hdr: TOK_EVENT . TOK_IDENT

    TOK_IDENT  shift, and go to state 39


state 10

   41 event: TOK_ANY .

    $default  reduce using rule 41 (event)


state 11

  124 baseType: TOK_VOID .

    $default  reduce using rule 124 (baseType)


state 12

  125 baseType: TOK_STRING .

    $default  reduce using rule 125 (baseType)


state 13

  121 baseType: TOK_INT .

    $default  reduce using rule 121 (baseType)


state 14

  119 type: TOK_UNSIGNED . baseType

    TOK_VOID    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_INT     shift, and go to state 13
    TOK_BOOL    shift, and go to state 15
    TOK_BYTE    shift, and go to state 16
    TOK_DOUBLE  shift, and go to state 17

    baseType  go to state 40


state 15

  122 baseType: TOK_BOOL .

    $default  reduce using rule 122 (baseType)


state 16

  126 baseType: TOK_BYTE .

    $default  reduce using rule 126 (baseType)


state 17

  123 baseType: TOK_DOUBLE .

    $default  reduce using rule 123 (baseType)


state 18

   32 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   42 event: TOK_IDENT . evenparamlistpp
  120 type: TOK_IDENT .

    error       shift, and go to state 41
    TOK_LPAREN  shift, and go to state 42

    error      [reduce using rule 120 (type)]
    TOK_IDENT  reduce using rule 120 (type)

    evenparamlistpp  go to state 43


state 19

    2 specification: ifc_decl_star rule_list .
    7 rule_list: rule_list . rule
    8          | rule_list . error TOK_SEMICOLON

    error       shift, and go to state 44
    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    $end  reduce using rule 2 (specification)

    rule           go to state 45
    event_pattern  go to state 23
    primitive_pat  go to state 28
    event          go to state 29


state 20

    6 rule_list: rule .

    $default  reduce using rule 6 (rule_list)


state 21

    4 ifc_decl_star: ifc_decl_star ifc_decl .

    $default  reduce using rule 4 (ifc_decl_star)


state 22

   16 ifc_decl: class_decl .

    $default  reduce using rule 16 (ifc_decl)


state 23

    9 rule: event_pattern . TOK_ARROW rule_body1
   10     | event_pattern . TOK_ARROW rule_body1 TOK_SEMICOLON
   11     | event_pattern . error rule_body1
   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    error         shift, and go to state 46
    TOK_PAT_STAR  shift, and go to state 47
    TOK_PAT_OR    shift, and go to state 48
    TOK_COLON     shift, and go to state 49
    TOK_ARROW     shift, and go to state 50


state 24

   13 ifc_decl: function_decl .

    $default  reduce using rule 13 (ifc_decl)


state 25

   14 ifc_decl: variable_decl .

    $default  reduce using rule 14 (ifc_decl)


state 26

   15 ifc_decl: event_decl .

    $default  reduce using rule 15 (ifc_decl)


state 27

   37 event_decl: event_decl_hdr . formalparamlistpp

    TOK_LPAREN  shift, and go to state 51

    formalparamlistpp  go to state 52


state 28

   19 event_pattern: primitive_pat .

    $default  reduce using rule 19 (event_pattern)


state 29

   39 primitive_pat: event .
   40              | event . TOK_BITOR expr

    TOK_BITOR  shift, and go to state 53

    $default  reduce using rule 39 (primitive_pat)


state 30

   26 function_decl: function_header . formalparamlistpp funcbody
   27              | function_header . error TOK_SEMICOLON

    error       shift, and go to state 54
    TOK_LPAREN  shift, and go to state 51

    formalparamlistpp  go to state 55


state 31

   28 variable_decl: type . vlist TOK_SEMICOLON
   29              | type . vlist error TOK_SEMICOLON
   30              | type . vlist TOK_COMMA error
   31              | type . error TOK_SEMICOLON
   73 function_header: type . TOK_IDENT

    error      shift, and go to state 56
    TOK_IDENT  shift, and go to state 57

    vlist  go to state 58
    vname  go to state 59


state 32

  118 type: baseType .

    $default  reduce using rule 118 (type)


state 33

    5 ifc_decl_star: ifc_decl_star error TOK_SEMICOLON .

    $default  reduce using rule 5 (ifc_decl_star)


state 34

   42 event: TOK_IDENT . evenparamlistpp

    TOK_LPAREN  shift, and go to state 42

    evenparamlistpp  go to state 43


state 35

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR
   24              | TOK_NOT event_pattern .

    $default  reduce using rule 24 (event_pattern)


state 36

   20 event_pattern: TOK_LPAREN event_pattern . TOK_RPAREN
   21              | event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 47
    TOK_PAT_OR    shift, and go to state 48
    TOK_COLON     shift, and go to state 49
    TOK_RPAREN    shift, and go to state 60


state 37

   18 class_decl: TOK_CLASS error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 61


state 38

   17 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 17 (class_decl)


state 39

   38 event_decl_hdr: TOK_EVENT TOK_IDENT .

    $default  reduce using rule 38 (event_decl_hdr)


state 40

  119 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 119 (type)


state 41

   32 variable_decl: TOK_IDENT error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 62


state 42

   43 evenparamlistpp: TOK_LPAREN . evenparamlist TOK_RPAREN

    TOK_IDENT  shift, and go to state 63

    $default  reduce using rule 44 (evenparamlist)

    evenparamlist  go to state 64


state 43

   42 event: TOK_IDENT evenparamlistpp .

    $default  reduce using rule 42 (event)


state 44

    8 rule_list: rule_list error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 65


state 45

    7 rule_list: rule_list rule .

    $default  reduce using rule 7 (rule_list)


state 46

   11 rule: event_pattern error . rule_body1

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    rule_body1           go to state 73
    stmt                 go to state 74
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 47

   23 event_pattern: event_pattern TOK_PAT_STAR .

    $default  reduce using rule 23 (event_pattern)


state 48

   22 event_pattern: event_pattern TOK_PAT_OR . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 81
    primitive_pat  go to state 28
    event          go to state 29


state 49

   21 event_pattern: event_pattern TOK_COLON . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 82
    primitive_pat  go to state 28
    event          go to state 29


state 50

    9 rule: event_pattern TOK_ARROW . rule_body1
   10     | event_pattern TOK_ARROW . rule_body1 TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    rule_body1           go to state 83
    stmt                 go to state 74
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 51

   74 formalparamlistpp: TOK_LPAREN . formal_param_list TOK_RPAREN

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 84

    $default  reduce using rule 113 (formal_param_list)

    formal_param_list  go to state 85
    formal_param_plus  go to state 86
    formal_param       go to state 87
    type               go to state 88
    baseType           go to state 32


state 52

   37 event_decl: event_decl_hdr formalparamlistpp .

    $default  reduce using rule 37 (event_decl)


state 53

   40 primitive_pat: event TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 101
    prt_expr             go to state 102
    literal              go to state 103


state 54

   27 function_decl: function_header error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 104


state 55

   26 function_decl: function_header formalparamlistpp . funcbody

    TOK_LBRACE  shift, and go to state 105

    $default  reduce using rule 75 (funcbody)

    funcbody  go to state 106


state 56

   31 variable_decl: type error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 107


state 57

   35 vname: TOK_IDENT .
   36      | TOK_IDENT . TOK_ASSIGN expr
   73 function_header: type TOK_IDENT .

    TOK_ASSIGN  shift, and go to state 108

    error       reduce using rule 35 (vname)
    error       [reduce using rule 73 (function_header)]
    TOK_LPAREN  reduce using rule 73 (function_header)
    $default    reduce using rule 35 (vname)


state 58

   28 variable_decl: type vlist . TOK_SEMICOLON
   29              | type vlist . error TOK_SEMICOLON
   30              | type vlist . TOK_COMMA error
   34 vlist: vlist . TOK_COMMA vname

    error          shift, and go to state 109
    TOK_COMMA      shift, and go to state 110
    TOK_SEMICOLON  shift, and go to state 111


state 59

   33 vlist: vname .

    $default  reduce using rule 33 (vlist)


state 60

   20 event_pattern: TOK_LPAREN event_pattern TOK_RPAREN .

    $default  reduce using rule 20 (event_pattern)


state 61

   18 class_decl: TOK_CLASS error TOK_SEMICOLON .

    $default  reduce using rule 18 (class_decl)


state 62

   32 variable_decl: TOK_IDENT error TOK_SEMICOLON .

    $default  reduce using rule 32 (variable_decl)


state 63

   45 evenparamlist: TOK_IDENT .

    $default  reduce using rule 45 (evenparamlist)


state 64

   43 evenparamlistpp: TOK_LPAREN evenparamlist . TOK_RPAREN
   46 evenparamlist: evenparamlist . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 112
    TOK_RPAREN  shift, and go to state 113


state 65

    8 rule_list: rule_list error TOK_SEMICOLON .

    $default  reduce using rule 8 (rule_list)


state 66

   47 stmt: TOK_SEMICOLON .

    $default  reduce using rule 47 (stmt)


state 67

   50 stmt: TOK_LBRACE . stmt_plus TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 114
    ret_stmt             go to state 75
    stmt_plus            go to state 115
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 68

   59 if_then_else_stmt: TOK_IF . expr stmt TOK_ELSE stmt
   60                  | TOK_IF . expr stmt
   61                  | TOK_IF . error stmt
   62                  | TOK_IF . expr error stmt
   63                  | TOK_IF . expr stmt TOK_ELSE error TOK_SEMICOLON

    error          shift, and go to state 116
    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 117
    prt_expr             go to state 102
    literal              go to state 103


state 69

   55 ret_stmt: TOK_RETURN . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 118
    prt_expr             go to state 102
    literal              go to state 103


state 70

  107 prt_expr: TOK_PRINT . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 119
    prt_expr             go to state 102
    literal              go to state 103


state 71

   53 stmt: TOK_WHILE . expr stmt

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 120
    prt_expr             go to state 102
    literal              go to state 103


state 72

   66 ref_expr: TOK_IDENT .
   67 function_invocation: TOK_IDENT . funcinvolistpp

    TOK_LPAREN  shift, and go to state 121

    TOK_LPAREN  [reduce using rule 66 (ref_expr)]
    $default    reduce using rule 66 (ref_expr)

    funcinvolistpp  go to state 122


state 73

   11 rule: event_pattern error rule_body1 .

    $default  reduce using rule 11 (rule)


state 74

   25 rule_body1: stmt .

    $default  reduce using rule 25 (rule_body1)


state 75

   52 stmt: ret_stmt .

    $default  reduce using rule 52 (stmt)


state 76

   51 stmt: if_then_else_stmt .

    $default  reduce using rule 51 (stmt)


state 77

   49 stmt: asg_stmt .

    $default  reduce using rule 49 (stmt)


state 78

   64 asg_stmt: ref_expr . TOK_ASSIGN expr
   65         | ref_expr . TOK_ASSIGN error TOK_SEMICOLON

    TOK_ASSIGN  shift, and go to state 123


state 79

   48 stmt: function_invocation .

    $default  reduce using rule 48 (stmt)


state 80

   54 stmt: prt_expr . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 124


state 81

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   22              | event_pattern TOK_PAT_OR event_pattern .
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 47
    TOK_COLON     shift, and go to state 49

    $default  reduce using rule 22 (event_pattern)


state 82

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   21              | event_pattern TOK_COLON event_pattern .
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 47

    $default  reduce using rule 21 (event_pattern)


state 83

    9 rule: event_pattern TOK_ARROW rule_body1 .
   10     | event_pattern TOK_ARROW rule_body1 . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 125

    $default  reduce using rule 9 (rule)


state 84

  120 type: TOK_IDENT .

    $default  reduce using rule 120 (type)


state 85

   74 formalparamlistpp: TOK_LPAREN formal_param_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 126


state 86

  114 formal_param_list: formal_param_plus .
  116 formal_param_plus: formal_param_plus . TOK_COMMA formal_param

    TOK_COMMA  shift, and go to state 127

    $default  reduce using rule 114 (formal_param_list)


state 87

  115 formal_param_plus: formal_param .

    $default  reduce using rule 115 (formal_param_plus)


state 88

  117 formal_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 128


state 89

   86 expr: TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 129
    prt_expr             go to state 102
    literal              go to state 103


state 90

   85 expr: TOK_BITNOT . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 130
    prt_expr             go to state 102
    literal              go to state 103


state 91

   88 expr: TOK_NOT . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 131
    prt_expr             go to state 102
    literal              go to state 103


state 92

   87 expr: TOK_LPAREN . expr TOK_RPAREN

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 132
    prt_expr             go to state 102
    literal              go to state 103


state 93

  108 literal: TOK_UINTNUM .

    $default  reduce using rule 108 (literal)


state 94

  109 literal: TOK_DOUBLENUM .

    $default  reduce using rule 109 (literal)


state 95

  110 literal: TOK_STRCONST .

    $default  reduce using rule 110 (literal)


state 96

  111 literal: TOK_TRUE .

    $default  reduce using rule 111 (literal)


state 97

  112 literal: TOK_FALSE .

    $default  reduce using rule 112 (literal)


state 98

   83 expr: asg_stmt .

    $default  reduce using rule 83 (expr)


state 99

   64 asg_stmt: ref_expr . TOK_ASSIGN expr
   65         | ref_expr . TOK_ASSIGN error TOK_SEMICOLON
   82 expr: ref_expr .

    TOK_ASSIGN  shift, and go to state 123

    $default  reduce using rule 82 (expr)


state 100

   84 expr: function_invocation .

    $default  reduce using rule 84 (expr)


state 101

   40 primitive_pat: event TOK_BITOR expr .
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150

    $default  reduce using rule 40 (primitive_pat)


state 102

   81 expr: prt_expr .

    $default  reduce using rule 81 (expr)


state 103

   80 expr: literal .

    $default  reduce using rule 80 (expr)


state 104

   27 function_decl: function_header error TOK_SEMICOLON .

    $default  reduce using rule 27 (function_decl)


state 105

   76 funcbody: TOK_LBRACE . fun_rest TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 151

    variable_decl        go to state 152
    stmt                 go to state 114
    ret_stmt             go to state 75
    stmt_plus            go to state 153
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    fun_rest             go to state 154
    prt_expr             go to state 80
    type                 go to state 155
    baseType             go to state 32


state 106

   26 function_decl: function_header formalparamlistpp funcbody .

    $default  reduce using rule 26 (function_decl)


state 107

   31 variable_decl: type error TOK_SEMICOLON .

    $default  reduce using rule 31 (variable_decl)


state 108

   36 vname: TOK_IDENT TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 156
    prt_expr             go to state 102
    literal              go to state 103


state 109

   29 variable_decl: type vlist error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 157


state 110

   30 variable_decl: type vlist TOK_COMMA . error
   34 vlist: vlist TOK_COMMA . vname

    error      shift, and go to state 158
    TOK_IDENT  shift, and go to state 159

    vname  go to state 160


state 111

   28 variable_decl: type vlist TOK_SEMICOLON .

    $default  reduce using rule 28 (variable_decl)


state 112

   46 evenparamlist: evenparamlist TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 161


state 113

   43 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN .

    $default  reduce using rule 43 (evenparamlistpp)


state 114

   56 stmt_plus: stmt .

    $default  reduce using rule 56 (stmt_plus)


state 115

   50 stmt: TOK_LBRACE stmt_plus . TOK_RBRACE
   57 stmt_plus: stmt_plus . stmt
   58          | stmt_plus . error stmt

    error          shift, and go to state 162
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_RBRACE     shift, and go to state 163
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 164
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 116

   61 if_then_else_stmt: TOK_IF error . stmt

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 165
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 117

   59 if_then_else_stmt: TOK_IF expr . stmt TOK_ELSE stmt
   60                  | TOK_IF expr . stmt
   62                  | TOK_IF expr . error stmt
   63                  | TOK_IF expr . stmt TOK_ELSE error TOK_SEMICOLON
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    error          shift, and go to state 166
    TOK_PLUS       shift, and go to state 133
    TOK_MINUS      shift, and go to state 134
    TOK_MULT       shift, and go to state 135
    TOK_DIV        shift, and go to state 136
    TOK_MOD        shift, and go to state 137
    TOK_BITAND     shift, and go to state 138
    TOK_BITOR      shift, and go to state 139
    TOK_BITXOR     shift, and go to state 140
    TOK_SHL        shift, and go to state 141
    TOK_SHR        shift, and go to state 142
    TOK_GT         shift, and go to state 143
    TOK_LT         shift, and go to state 144
    TOK_GE         shift, and go to state 145
    TOK_LE         shift, and go to state 146
    TOK_EQ         shift, and go to state 147
    TOK_NE         shift, and go to state 148
    TOK_AND        shift, and go to state 149
    TOK_OR         shift, and go to state 150
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 167
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 118

   55 ret_stmt: TOK_RETURN expr .
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150

    $default  reduce using rule 55 (ret_stmt)


state 119

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr
  107 prt_expr: TOK_PRINT expr .

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150

    TOK_PLUS    [reduce using rule 107 (prt_expr)]
    TOK_MINUS   [reduce using rule 107 (prt_expr)]
    TOK_MULT    [reduce using rule 107 (prt_expr)]
    TOK_DIV     [reduce using rule 107 (prt_expr)]
    TOK_MOD     [reduce using rule 107 (prt_expr)]
    TOK_BITAND  [reduce using rule 107 (prt_expr)]
    TOK_BITOR   [reduce using rule 107 (prt_expr)]
    TOK_BITXOR  [reduce using rule 107 (prt_expr)]
    TOK_SHL     [reduce using rule 107 (prt_expr)]
    TOK_SHR     [reduce using rule 107 (prt_expr)]
    TOK_GT      [reduce using rule 107 (prt_expr)]
    TOK_LT      [reduce using rule 107 (prt_expr)]
    TOK_GE      [reduce using rule 107 (prt_expr)]
    TOK_LE      [reduce using rule 107 (prt_expr)]
    TOK_EQ      [reduce using rule 107 (prt_expr)]
    TOK_NE      [reduce using rule 107 (prt_expr)]
    TOK_AND     [reduce using rule 107 (prt_expr)]
    TOK_OR      [reduce using rule 107 (prt_expr)]
    $default    reduce using rule 107 (prt_expr)


state 120

   53 stmt: TOK_WHILE expr . stmt
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS       shift, and go to state 133
    TOK_MINUS      shift, and go to state 134
    TOK_MULT       shift, and go to state 135
    TOK_DIV        shift, and go to state 136
    TOK_MOD        shift, and go to state 137
    TOK_BITAND     shift, and go to state 138
    TOK_BITOR      shift, and go to state 139
    TOK_BITXOR     shift, and go to state 140
    TOK_SHL        shift, and go to state 141
    TOK_SHR        shift, and go to state 142
    TOK_GT         shift, and go to state 143
    TOK_LT         shift, and go to state 144
    TOK_GE         shift, and go to state 145
    TOK_LE         shift, and go to state 146
    TOK_EQ         shift, and go to state 147
    TOK_NE         shift, and go to state 148
    TOK_AND        shift, and go to state 149
    TOK_OR         shift, and go to state 150
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 168
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 121

   68 funcinvolistpp: TOK_LPAREN . expr_list TOK_RPAREN

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    $default  reduce using rule 69 (expr_list)

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr_list            go to state 169
    expr_plus            go to state 170
    expr                 go to state 171
    prt_expr             go to state 102
    literal              go to state 103


state 122

   67 function_invocation: TOK_IDENT funcinvolistpp .

    $default  reduce using rule 67 (function_invocation)


state 123

   64 asg_stmt: ref_expr TOK_ASSIGN . expr
   65         | ref_expr TOK_ASSIGN . error TOK_SEMICOLON

    error          shift, and go to state 172
    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 173
    prt_expr             go to state 102
    literal              go to state 103


state 124

   54 stmt: prt_expr TOK_SEMICOLON .

    $default  reduce using rule 54 (stmt)


state 125

   10 rule: event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON .

    $default  reduce using rule 10 (rule)


state 126

   74 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN .

    $default  reduce using rule 74 (formalparamlistpp)


state 127

  116 formal_param_plus: formal_param_plus TOK_COMMA . formal_param

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 84

    formal_param  go to state 174
    type          go to state 88
    baseType      go to state 32


state 128

  117 formal_param: type TOK_IDENT .

    $default  reduce using rule 117 (formal_param)


state 129

   86 expr: TOK_MINUS expr .
   89     | expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 135
    TOK_DIV   shift, and go to state 136
    TOK_MOD   shift, and go to state 137

    $default  reduce using rule 86 (expr)


state 130

   85 expr: TOK_BITNOT expr .
   89     | expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 133
    TOK_MINUS  shift, and go to state 134
    TOK_MULT   shift, and go to state 135
    TOK_DIV    shift, and go to state 136
    TOK_MOD    shift, and go to state 137
    TOK_SHL    shift, and go to state 141
    TOK_SHR    shift, and go to state 142

    $default  reduce using rule 85 (expr)


state 131

   88 expr: TOK_NOT expr .
   89     | expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148

    $default  reduce using rule 88 (expr)


state 132

   87 expr: TOK_LPAREN expr . TOK_RPAREN
   89     | expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150
    TOK_RPAREN  shift, and go to state 175


state 133

  106 expr: expr TOK_PLUS . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 176
    prt_expr             go to state 102
    literal              go to state 103


state 134

   99 expr: expr TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 177
    prt_expr             go to state 102
    literal              go to state 103


state 135

  102 expr: expr TOK_MULT . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 178
    prt_expr             go to state 102
    literal              go to state 103


state 136

  101 expr: expr TOK_DIV . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 179
    prt_expr             go to state 102
    literal              go to state 103


state 137

  105 expr: expr TOK_MOD . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 180
    prt_expr             go to state 102
    literal              go to state 103


state 138

  103 expr: expr TOK_BITAND . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 181
    prt_expr             go to state 102
    literal              go to state 103


state 139

   98 expr: expr TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 182
    prt_expr             go to state 102
    literal              go to state 103


state 140

   89 expr: expr TOK_BITXOR . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 183
    prt_expr             go to state 102
    literal              go to state 103


state 141

   90 expr: expr TOK_SHL . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 184
    prt_expr             go to state 102
    literal              go to state 103


state 142

   95 expr: expr TOK_SHR . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 185
    prt_expr             go to state 102
    literal              go to state 103


state 143

   96 expr: expr TOK_GT . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 186
    prt_expr             go to state 102
    literal              go to state 103


state 144

   92 expr: expr TOK_LT . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 187
    prt_expr             go to state 102
    literal              go to state 103


state 145

   94 expr: expr TOK_GE . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 188
    prt_expr             go to state 102
    literal              go to state 103


state 146

   91 expr: expr TOK_LE . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 189
    prt_expr             go to state 102
    literal              go to state 103


state 147

   93 expr: expr TOK_EQ . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 190
    prt_expr             go to state 102
    literal              go to state 103


state 148

  100 expr: expr TOK_NE . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 191
    prt_expr             go to state 102
    literal              go to state 103


state 149

  104 expr: expr TOK_AND . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 192
    prt_expr             go to state 102
    literal              go to state 103


state 150

   97 expr: expr TOK_OR . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 193
    prt_expr             go to state 102
    literal              go to state 103


state 151

   32 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   66 ref_expr: TOK_IDENT .
   67 function_invocation: TOK_IDENT . funcinvolistpp
  120 type: TOK_IDENT .

    error       shift, and go to state 41
    TOK_LPAREN  shift, and go to state 121

    error       [reduce using rule 120 (type)]
    TOK_ASSIGN  reduce using rule 66 (ref_expr)
    TOK_IDENT   reduce using rule 120 (type)

    funcinvolistpp  go to state 122


state 152

   78 fun_rest: variable_decl . stmt_plus
   79         | variable_decl . error

    error          shift, and go to state 194
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 114
    ret_stmt             go to state 75
    stmt_plus            go to state 195
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 153

   57 stmt_plus: stmt_plus . stmt
   58          | stmt_plus . error stmt
   77 fun_rest: stmt_plus .

    error          shift, and go to state 162
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    TOK_RBRACE  reduce using rule 77 (fun_rest)

    stmt                 go to state 164
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 154

   76 funcbody: TOK_LBRACE fun_rest . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 196


state 155

   28 variable_decl: type . vlist TOK_SEMICOLON
   29              | type . vlist error TOK_SEMICOLON
   30              | type . vlist TOK_COMMA error
   31              | type . error TOK_SEMICOLON

    error      shift, and go to state 56
    TOK_IDENT  shift, and go to state 159

    vlist  go to state 58
    vname  go to state 59


state 156

   36 vname: TOK_IDENT TOK_ASSIGN expr .
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150

    $default  reduce using rule 36 (vname)


state 157

   29 variable_decl: type vlist error TOK_SEMICOLON .

    $default  reduce using rule 29 (variable_decl)


state 158

   30 variable_decl: type vlist TOK_COMMA error .

    $default  reduce using rule 30 (variable_decl)


state 159

   35 vname: TOK_IDENT .
   36      | TOK_IDENT . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 108

    $default  reduce using rule 35 (vname)


state 160

   34 vlist: vlist TOK_COMMA vname .

    $default  reduce using rule 34 (vlist)


state 161

   46 evenparamlist: evenparamlist TOK_COMMA TOK_IDENT .

    $default  reduce using rule 46 (evenparamlist)


state 162

   58 stmt_plus: stmt_plus error . stmt

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 197
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 163

   50 stmt: TOK_LBRACE stmt_plus TOK_RBRACE .

    $default  reduce using rule 50 (stmt)


state 164

   57 stmt_plus: stmt_plus stmt .

    $default  reduce using rule 57 (stmt_plus)


state 165

   61 if_then_else_stmt: TOK_IF error stmt .

    $default  reduce using rule 61 (if_then_else_stmt)


state 166

   62 if_then_else_stmt: TOK_IF expr error . stmt

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 198
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 167

   59 if_then_else_stmt: TOK_IF expr stmt . TOK_ELSE stmt
   60                  | TOK_IF expr stmt .
   63                  | TOK_IF expr stmt . TOK_ELSE error TOK_SEMICOLON

    TOK_ELSE  shift, and go to state 199

    TOK_ELSE  [reduce using rule 60 (if_then_else_stmt)]
    $default  reduce using rule 60 (if_then_else_stmt)


state 168

   53 stmt: TOK_WHILE expr stmt .

    $default  reduce using rule 53 (stmt)


state 169

   68 funcinvolistpp: TOK_LPAREN expr_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 200


state 170

   70 expr_list: expr_plus .
   72 expr_plus: expr_plus . TOK_COMMA expr

    TOK_COMMA  shift, and go to state 201

    $default  reduce using rule 70 (expr_list)


state 171

   71 expr_plus: expr .
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150

    $default  reduce using rule 71 (expr_plus)


state 172

   65 asg_stmt: ref_expr TOK_ASSIGN error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 202


state 173

   64 asg_stmt: ref_expr TOK_ASSIGN expr .
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150

    $default  reduce using rule 64 (asg_stmt)


state 174

  116 formal_param_plus: formal_param_plus TOK_COMMA formal_param .

    $default  reduce using rule 116 (formal_param_plus)


state 175

   87 expr: TOK_LPAREN expr TOK_RPAREN .

    $default  reduce using rule 87 (expr)


state 176

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr
  106     | expr TOK_PLUS expr .

    TOK_MULT  shift, and go to state 135
    TOK_DIV   shift, and go to state 136
    TOK_MOD   shift, and go to state 137

    $default  reduce using rule 106 (expr)


state 177

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
   99     | expr TOK_MINUS expr .
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 135
    TOK_DIV   shift, and go to state 136
    TOK_MOD   shift, and go to state 137

    $default  reduce using rule 99 (expr)


state 178

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  102     | expr TOK_MULT expr .
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    $default  reduce using rule 102 (expr)


state 179

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  101     | expr TOK_DIV expr .
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    $default  reduce using rule 101 (expr)


state 180

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  105     | expr TOK_MOD expr .
  106     | expr . TOK_PLUS expr

    $default  reduce using rule 105 (expr)


state 181

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  103     | expr TOK_BITAND expr .
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 133
    TOK_MINUS  shift, and go to state 134
    TOK_MULT   shift, and go to state 135
    TOK_DIV    shift, and go to state 136
    TOK_MOD    shift, and go to state 137
    TOK_SHL    shift, and go to state 141
    TOK_SHR    shift, and go to state 142

    $default  reduce using rule 103 (expr)


state 182

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   98     | expr TOK_BITOR expr .
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    $default  reduce using rule 98 (expr)


state 183

   89 expr: expr . TOK_BITXOR expr
   89     | expr TOK_BITXOR expr .
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    $default  reduce using rule 89 (expr)


state 184

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   90     | expr TOK_SHL expr .
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 133
    TOK_MINUS  shift, and go to state 134
    TOK_MULT   shift, and go to state 135
    TOK_DIV    shift, and go to state 136
    TOK_MOD    shift, and go to state 137

    $default  reduce using rule 90 (expr)


state 185

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   95     | expr TOK_SHR expr .
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 133
    TOK_MINUS  shift, and go to state 134
    TOK_MULT   shift, and go to state 135
    TOK_DIV    shift, and go to state 136
    TOK_MOD    shift, and go to state 137

    $default  reduce using rule 95 (expr)


state 186

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   96     | expr TOK_GT expr .
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 96 (expr)


state 187

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   92     | expr TOK_LT expr .
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 92 (expr)


state 188

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   94     | expr TOK_GE expr .
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 94 (expr)


state 189

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   91     | expr TOK_LE expr .
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 91 (expr)


state 190

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   93     | expr TOK_EQ expr .
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 93 (expr)


state 191

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  100     | expr TOK_NE expr .
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 100 (expr)


state 192

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  104     | expr TOK_AND expr .
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148

    $default  reduce using rule 104 (expr)


state 193

   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   97     | expr TOK_OR expr .
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149

    $default  reduce using rule 97 (expr)


state 194

   79 fun_rest: variable_decl error .

    $default  reduce using rule 79 (fun_rest)


state 195

   57 stmt_plus: stmt_plus . stmt
   58          | stmt_plus . error stmt
   78 fun_rest: variable_decl stmt_plus .

    error          shift, and go to state 162
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    TOK_RBRACE  reduce using rule 78 (fun_rest)

    stmt                 go to state 164
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 196

   76 funcbody: TOK_LBRACE fun_rest TOK_RBRACE .

    $default  reduce using rule 76 (funcbody)


state 197

   58 stmt_plus: stmt_plus error stmt .

    $default  reduce using rule 58 (stmt_plus)


state 198

   62 if_then_else_stmt: TOK_IF expr error stmt .

    $default  reduce using rule 62 (if_then_else_stmt)


state 199

   59 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE . stmt
   63                  | TOK_IF expr stmt TOK_ELSE . error TOK_SEMICOLON

    error          shift, and go to state 203
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_PRINT      shift, and go to state 70
    TOK_WHILE      shift, and go to state 71
    TOK_IDENT      shift, and go to state 72

    stmt                 go to state 204
    ret_stmt             go to state 75
    if_then_else_stmt    go to state 76
    asg_stmt             go to state 77
    ref_expr             go to state 78
    function_invocation  go to state 79
    prt_expr             go to state 80


state 200

   68 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN .

    $default  reduce using rule 68 (funcinvolistpp)


state 201

   72 expr_plus: expr_plus TOK_COMMA . expr

    TOK_MINUS      shift, and go to state 89
    TOK_BITNOT     shift, and go to state 90
    TOK_NOT        shift, and go to state 91
    TOK_LPAREN     shift, and go to state 92
    TOK_PRINT      shift, and go to state 70
    TOK_UINTNUM    shift, and go to state 93
    TOK_DOUBLENUM  shift, and go to state 94
    TOK_STRCONST   shift, and go to state 95
    TOK_TRUE       shift, and go to state 96
    TOK_FALSE      shift, and go to state 97
    TOK_IDENT      shift, and go to state 72

    asg_stmt             go to state 98
    ref_expr             go to state 99
    function_invocation  go to state 100
    expr                 go to state 205
    prt_expr             go to state 102
    literal              go to state 103


state 202

   65 asg_stmt: ref_expr TOK_ASSIGN error TOK_SEMICOLON .

    $default  reduce using rule 65 (asg_stmt)


state 203

   63 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 206


state 204

   59 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt .

    $default  reduce using rule 59 (if_then_else_stmt)


state 205

   72 expr_plus: expr_plus TOK_COMMA expr .
   89 expr: expr . TOK_BITXOR expr
   90     | expr . TOK_SHL expr
   91     | expr . TOK_LE expr
   92     | expr . TOK_LT expr
   93     | expr . TOK_EQ expr
   94     | expr . TOK_GE expr
   95     | expr . TOK_SHR expr
   96     | expr . TOK_GT expr
   97     | expr . TOK_OR expr
   98     | expr . TOK_BITOR expr
   99     | expr . TOK_MINUS expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_DIV expr
  102     | expr . TOK_MULT expr
  103     | expr . TOK_BITAND expr
  104     | expr . TOK_AND expr
  105     | expr . TOK_MOD expr
  106     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 133
    TOK_MINUS   shift, and go to state 134
    TOK_MULT    shift, and go to state 135
    TOK_DIV     shift, and go to state 136
    TOK_MOD     shift, and go to state 137
    TOK_BITAND  shift, and go to state 138
    TOK_BITOR   shift, and go to state 139
    TOK_BITXOR  shift, and go to state 140
    TOK_SHL     shift, and go to state 141
    TOK_SHR     shift, and go to state 142
    TOK_GT      shift, and go to state 143
    TOK_LT      shift, and go to state 144
    TOK_GE      shift, and go to state 145
    TOK_LE      shift, and go to state 146
    TOK_EQ      shift, and go to state 147
    TOK_NE      shift, and go to state 148
    TOK_AND     shift, and go to state 149
    TOK_OR      shift, and go to state 150

    $default  reduce using rule 72 (expr_plus)


state 206

   63 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE error TOK_SEMICOLON .

    $default  reduce using rule 63 (if_then_else_stmt)
