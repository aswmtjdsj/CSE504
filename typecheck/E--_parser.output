Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_UMINUS
   TOK_PRINT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


State 18 conflicts: 1 shift/reduce
State 57 conflicts: 1 reduce/reduce
State 70 conflicts: 1 shift/reduce
State 144 conflicts: 1 shift/reduce
State 160 conflicts: 1 shift/reduce


Grammar

    0 $accept: specification $end

    1 specification: ifc_decl_star
    2              | ifc_decl_star rule_list

    3 ifc_decl_star: /* empty */
    4              | ifc_decl_star ifc_decl
    5              | ifc_decl_star error TOK_SEMICOLON

    6 rule_list: rule
    7          | rule_list rule
    8          | rule_list error TOK_SEMICOLON

    9 rule: event_pattern TOK_ARROW rule_body1
   10     | event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON
   11     | event_pattern error rule_body1

   12 ifc_decl: TOK_SEMICOLON
   13         | function_decl
   14         | variable_decl
   15         | event_decl
   16         | class_decl

   17 class_decl: TOK_CLASS TOK_IDENT
   18           | TOK_CLASS error TOK_SEMICOLON

   19 event_pattern: primitive_pat
   20              | TOK_LPAREN event_pattern TOK_RPAREN
   21              | event_pattern TOK_COLON event_pattern
   22              | event_pattern TOK_PAT_OR event_pattern
   23              | event_pattern TOK_PAT_STAR
   24              | TOK_NOT event_pattern

   25 rule_body1: stmt

   26 function_decl: function_header formalparamlistpp funcbody
   27              | function_header error TOK_SEMICOLON

   28 variable_decl: type vlist TOK_SEMICOLON
   29              | type vlist error TOK_SEMICOLON
   30              | type vlist TOK_COMMA error
   31              | type error TOK_SEMICOLON
   32              | TOK_IDENT error TOK_SEMICOLON

   33 vlist: vname
   34      | vlist TOK_COMMA vname

   35 vname: TOK_IDENT
   36      | TOK_IDENT TOK_ASSIGN expr

   37 event_decl: event_decl_hdr formalparamlistpp

   38 event_decl_hdr: TOK_EVENT TOK_IDENT

   39 primitive_pat: event
   40              | event TOK_BITOR expr

   41 event: TOK_ANY
   42      | TOK_IDENT evenparamlistpp

   43 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN

   44 evenparamlist: /* empty */
   45              | TOK_IDENT
   46              | evenparamlist TOK_COMMA TOK_IDENT

   47 stmt: TOK_SEMICOLON
   48     | function_invocation
   49     | asg_stmt
   50     | TOK_LBRACE stmt_plus TOK_RBRACE
   51     | if_then_else_stmt
   52     | ret_stmt

   53 ret_stmt: TOK_RETURN expr

   54 stmt_plus: stmt
   55          | stmt_plus stmt
   56          | stmt_plus error stmt

   57 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt
   58                  | TOK_IF expr stmt
   59                  | TOK_IF error stmt
   60                  | TOK_IF expr error stmt
   61                  | TOK_IF expr stmt TOK_ELSE error TOK_SEMICOLON

   62 asg_stmt: ref_expr TOK_ASSIGN expr
   63         | ref_expr TOK_ASSIGN error TOK_SEMICOLON

   64 ref_expr: TOK_IDENT

   65 function_invocation: TOK_IDENT funcinvolistpp

   66 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN

   67 expr_list: /* empty */
   68          | expr_plus

   69 expr_plus: expr
   70          | expr_plus TOK_COMMA expr

   71 function_header: type TOK_IDENT

   72 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN

   73 funcbody: /* empty */
   74         | TOK_LBRACE fun_rest TOK_RBRACE

   75 fun_rest: stmt_plus
   76         | variable_decl stmt_plus
   77         | variable_decl error

   78 expr: literal
   79     | ref_expr
   80     | asg_stmt
   81     | function_invocation
   82     | TOK_BITNOT expr
   83     | TOK_MINUS expr
   84     | TOK_LPAREN expr TOK_RPAREN
   85     | TOK_NOT expr
   86     | expr TOK_BITXOR expr
   87     | expr TOK_SHL expr
   88     | expr TOK_LE expr
   89     | expr TOK_LT expr
   90     | expr TOK_EQ expr
   91     | expr TOK_GE expr
   92     | expr TOK_SHR expr
   93     | expr TOK_GT expr
   94     | expr TOK_OR expr
   95     | expr TOK_BITOR expr
   96     | expr TOK_MINUS expr
   97     | expr TOK_NE expr
   98     | expr TOK_DIV expr
   99     | expr TOK_MULT expr
  100     | expr TOK_BITAND expr
  101     | expr TOK_AND expr
  102     | expr TOK_MOD expr
  103     | expr TOK_PLUS expr

  104 literal: TOK_UINTNUM
  105        | TOK_DOUBLENUM
  106        | TOK_STRCONST
  107        | TOK_TRUE
  108        | TOK_FALSE

  109 formal_param_list: /* empty */
  110                  | formal_param_plus

  111 formal_param_plus: formal_param
  112                  | formal_param_plus TOK_COMMA formal_param

  113 formal_param: type TOK_IDENT

  114 type: baseType
  115     | TOK_UNSIGNED baseType
  116     | TOK_IDENT

  117 baseType: TOK_INT
  118         | TOK_BOOL
  119         | TOK_DOUBLE
  120         | TOK_VOID
  121         | TOK_STRING
  122         | TOK_BYTE


Terminals, with rules where they appear

$end (0) 0
error (256) 5 8 11 18 27 29 30 31 32 56 59 60 61 63 77
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 23
TOK_PAT_OR (260) 22
TOK_PAT_NOT (261)
TOK_PLUS (262) 103
TOK_MINUS (263) 83 96
TOK_UMINUS (264)
TOK_MULT (265) 99
TOK_DIV (266) 98
TOK_MOD (267) 102
TOK_BITAND (268) 100
TOK_BITOR (269) 40 95
TOK_BITNOT (270) 82
TOK_BITXOR (271) 86
TOK_SHL (272) 87
TOK_SHR (273) 92
TOK_GT (274) 93
TOK_LT (275) 89
TOK_GE (276) 91
TOK_LE (277) 88
TOK_EQ (278) 90
TOK_NE (279) 97
TOK_AND (280) 101
TOK_OR (281) 94
TOK_NOT (282) 24 85
TOK_COMMA (283) 30 34 46 70 112
TOK_ASSIGN (284) 36 62 63
TOK_SEMICOLON (285) 5 8 10 12 18 27 28 29 31 32 47 61 63
TOK_COLON (286) 21
TOK_ARROW (287) 9 10
TOK_LBRACE (288) 50 74
TOK_RBRACE (289) 50 74
TOK_LPAREN (290) 20 43 66 72 84
TOK_RPAREN (291) 20 43 66 72 84
TOK_IF (292) 57 58 59 60 61
TOK_ELSE (293) 57 61
TOK_CLASS (294) 17 18
TOK_RETURN (295) 53
TOK_EVENT (296) 38
TOK_ANY (297) 41
TOK_PRINT (298)
TOK_UINTNUM (299) 104
TOK_DOUBLENUM (300) 105
TOK_VOID (301) 120
TOK_STRING (302) 121
TOK_STRCONST (303) 106
TOK_INT (304) 117
TOK_UNSIGNED (305) 115
TOK_BOOL (306) 118
TOK_BYTE (307) 122
TOK_DOUBLE (308) 119
TOK_SHORT (309)
TOK_TRUE (310) 107
TOK_FALSE (311) 108
TOK_IDENT (312) 17 32 35 36 38 42 45 46 64 65 71 113 116
TOK_DOUBLE_COLON (313)
TOK_LBRACK (314)
TOK_DOT (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
specification (62)
    on left: 1 2, on right: 0
ifc_decl_star (63)
    on left: 3 4 5, on right: 1 2 4 5
rule_list (64)
    on left: 6 7 8, on right: 2 7 8
rule (65)
    on left: 9 10 11, on right: 6 7
ifc_decl (66)
    on left: 12 13 14 15 16, on right: 4
class_decl (67)
    on left: 17 18, on right: 16
event_pattern (68)
    on left: 19 20 21 22 23 24, on right: 9 10 11 20 21 22 23 24
rule_body1 (69)
    on left: 25, on right: 9 10 11
function_decl (70)
    on left: 26 27, on right: 13
variable_decl (71)
    on left: 28 29 30 31 32, on right: 14 76 77
vlist (72)
    on left: 33 34, on right: 28 29 30 34
vname (73)
    on left: 35 36, on right: 33 34
event_decl (74)
    on left: 37, on right: 15
event_decl_hdr (75)
    on left: 38, on right: 37
primitive_pat (76)
    on left: 39 40, on right: 19
event (77)
    on left: 41 42, on right: 39 40
evenparamlistpp (78)
    on left: 43, on right: 42
evenparamlist (79)
    on left: 44 45 46, on right: 43 46
stmt (80)
    on left: 47 48 49 50 51 52, on right: 25 54 55 56 57 58 59 60 61
ret_stmt (81)
    on left: 53, on right: 52
stmt_plus (82)
    on left: 54 55 56, on right: 50 55 56 75 76
if_then_else_stmt (83)
    on left: 57 58 59 60 61, on right: 51
asg_stmt (84)
    on left: 62 63, on right: 49 80
ref_expr (85)
    on left: 64, on right: 62 63 79
function_invocation (86)
    on left: 65, on right: 48 81
funcinvolistpp (87)
    on left: 66, on right: 65
expr_list (88)
    on left: 67 68, on right: 66
expr_plus (89)
    on left: 69 70, on right: 68 70
function_header (90)
    on left: 71, on right: 26 27
formalparamlistpp (91)
    on left: 72, on right: 26 37
funcbody (92)
    on left: 73 74, on right: 26
fun_rest (93)
    on left: 75 76 77, on right: 74
expr (94)
    on left: 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
    96 97 98 99 100 101 102 103, on right: 36 40 53 57 58 60 61 62
    69 70 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
    101 102 103
literal (95)
    on left: 104 105 106 107 108, on right: 78
formal_param_list (96)
    on left: 109 110, on right: 72
formal_param_plus (97)
    on left: 111 112, on right: 110 112
formal_param (98)
    on left: 113, on right: 111 112
type (99)
    on left: 114 115 116, on right: 28 29 30 31 71 113
baseType (100)
    on left: 117 118 119 120 121 122, on right: 114 115


state 0

    0 $accept: . specification $end

    $default  reduce using rule 3 (ifc_decl_star)

    specification  go to state 1
    ifc_decl_star  go to state 2


state 1

    0 $accept: specification . $end

    $end  shift, and go to state 3


state 2

    1 specification: ifc_decl_star .
    2              | ifc_decl_star . rule_list
    4 ifc_decl_star: ifc_decl_star . ifc_decl
    5              | ifc_decl_star . error TOK_SEMICOLON

    error          shift, and go to state 4
    TOK_NOT        shift, and go to state 5
    TOK_SEMICOLON  shift, and go to state 6
    TOK_LPAREN     shift, and go to state 7
    TOK_CLASS      shift, and go to state 8
    TOK_EVENT      shift, and go to state 9
    TOK_ANY        shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 18

    $end  reduce using rule 1 (specification)

    rule_list        go to state 19
    rule             go to state 20
    ifc_decl         go to state 21
    class_decl       go to state 22
    event_pattern    go to state 23
    function_decl    go to state 24
    variable_decl    go to state 25
    event_decl       go to state 26
    event_decl_hdr   go to state 27
    primitive_pat    go to state 28
    event            go to state 29
    function_header  go to state 30
    type             go to state 31
    baseType         go to state 32


state 3

    0 $accept: specification $end .

    $default  accept


state 4

    5 ifc_decl_star: ifc_decl_star error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 33


state 5

   24 event_pattern: TOK_NOT . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 35
    primitive_pat  go to state 28
    event          go to state 29


state 6

   12 ifc_decl: TOK_SEMICOLON .

    $default  reduce using rule 12 (ifc_decl)


state 7

   20 event_pattern: TOK_LPAREN . event_pattern TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 36
    primitive_pat  go to state 28
    event          go to state 29


state 8

   17 class_decl: TOK_CLASS . TOK_IDENT
   18           | TOK_CLASS . error TOK_SEMICOLON

    error      shift, and go to state 37
    TOK_IDENT  shift, and go to state 38


state 9

   38 event_decl_hdr: TOK_EVENT . TOK_IDENT

    TOK_IDENT  shift, and go to state 39


state 10

   41 event: TOK_ANY .

    $default  reduce using rule 41 (event)


state 11

  120 baseType: TOK_VOID .

    $default  reduce using rule 120 (baseType)


state 12

  121 baseType: TOK_STRING .

    $default  reduce using rule 121 (baseType)


state 13

  117 baseType: TOK_INT .

    $default  reduce using rule 117 (baseType)


state 14

  115 type: TOK_UNSIGNED . baseType

    TOK_VOID    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_INT     shift, and go to state 13
    TOK_BOOL    shift, and go to state 15
    TOK_BYTE    shift, and go to state 16
    TOK_DOUBLE  shift, and go to state 17

    baseType  go to state 40


state 15

  118 baseType: TOK_BOOL .

    $default  reduce using rule 118 (baseType)


state 16

  122 baseType: TOK_BYTE .

    $default  reduce using rule 122 (baseType)


state 17

  119 baseType: TOK_DOUBLE .

    $default  reduce using rule 119 (baseType)


state 18

   32 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   42 event: TOK_IDENT . evenparamlistpp
  116 type: TOK_IDENT .

    error       shift, and go to state 41
    TOK_LPAREN  shift, and go to state 42

    error      [reduce using rule 116 (type)]
    TOK_IDENT  reduce using rule 116 (type)

    evenparamlistpp  go to state 43


state 19

    2 specification: ifc_decl_star rule_list .
    7 rule_list: rule_list . rule
    8          | rule_list . error TOK_SEMICOLON

    error       shift, and go to state 44
    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    $end  reduce using rule 2 (specification)

    rule           go to state 45
    event_pattern  go to state 23
    primitive_pat  go to state 28
    event          go to state 29


state 20

    6 rule_list: rule .

    $default  reduce using rule 6 (rule_list)


state 21

    4 ifc_decl_star: ifc_decl_star ifc_decl .

    $default  reduce using rule 4 (ifc_decl_star)


state 22

   16 ifc_decl: class_decl .

    $default  reduce using rule 16 (ifc_decl)


state 23

    9 rule: event_pattern . TOK_ARROW rule_body1
   10     | event_pattern . TOK_ARROW rule_body1 TOK_SEMICOLON
   11     | event_pattern . error rule_body1
   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    error         shift, and go to state 46
    TOK_PAT_STAR  shift, and go to state 47
    TOK_PAT_OR    shift, and go to state 48
    TOK_COLON     shift, and go to state 49
    TOK_ARROW     shift, and go to state 50


state 24

   13 ifc_decl: function_decl .

    $default  reduce using rule 13 (ifc_decl)


state 25

   14 ifc_decl: variable_decl .

    $default  reduce using rule 14 (ifc_decl)


state 26

   15 ifc_decl: event_decl .

    $default  reduce using rule 15 (ifc_decl)


state 27

   37 event_decl: event_decl_hdr . formalparamlistpp

    TOK_LPAREN  shift, and go to state 51

    formalparamlistpp  go to state 52


state 28

   19 event_pattern: primitive_pat .

    $default  reduce using rule 19 (event_pattern)


state 29

   39 primitive_pat: event .
   40              | event . TOK_BITOR expr

    TOK_BITOR  shift, and go to state 53

    $default  reduce using rule 39 (primitive_pat)


state 30

   26 function_decl: function_header . formalparamlistpp funcbody
   27              | function_header . error TOK_SEMICOLON

    error       shift, and go to state 54
    TOK_LPAREN  shift, and go to state 51

    formalparamlistpp  go to state 55


state 31

   28 variable_decl: type . vlist TOK_SEMICOLON
   29              | type . vlist error TOK_SEMICOLON
   30              | type . vlist TOK_COMMA error
   31              | type . error TOK_SEMICOLON
   71 function_header: type . TOK_IDENT

    error      shift, and go to state 56
    TOK_IDENT  shift, and go to state 57

    vlist  go to state 58
    vname  go to state 59


state 32

  114 type: baseType .

    $default  reduce using rule 114 (type)


state 33

    5 ifc_decl_star: ifc_decl_star error TOK_SEMICOLON .

    $default  reduce using rule 5 (ifc_decl_star)


state 34

   42 event: TOK_IDENT . evenparamlistpp

    TOK_LPAREN  shift, and go to state 42

    evenparamlistpp  go to state 43


state 35

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR
   24              | TOK_NOT event_pattern .

    $default  reduce using rule 24 (event_pattern)


state 36

   20 event_pattern: TOK_LPAREN event_pattern . TOK_RPAREN
   21              | event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 47
    TOK_PAT_OR    shift, and go to state 48
    TOK_COLON     shift, and go to state 49
    TOK_RPAREN    shift, and go to state 60


state 37

   18 class_decl: TOK_CLASS error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 61


state 38

   17 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 17 (class_decl)


state 39

   38 event_decl_hdr: TOK_EVENT TOK_IDENT .

    $default  reduce using rule 38 (event_decl_hdr)


state 40

  115 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 115 (type)


state 41

   32 variable_decl: TOK_IDENT error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 62


state 42

   43 evenparamlistpp: TOK_LPAREN . evenparamlist TOK_RPAREN

    TOK_IDENT  shift, and go to state 63

    $default  reduce using rule 44 (evenparamlist)

    evenparamlist  go to state 64


state 43

   42 event: TOK_IDENT evenparamlistpp .

    $default  reduce using rule 42 (event)


state 44

    8 rule_list: rule_list error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 65


state 45

    7 rule_list: rule_list rule .

    $default  reduce using rule 7 (rule_list)


state 46

   11 rule: event_pattern error . rule_body1

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    rule_body1           go to state 71
    stmt                 go to state 72
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 47

   23 event_pattern: event_pattern TOK_PAT_STAR .

    $default  reduce using rule 23 (event_pattern)


state 48

   22 event_pattern: event_pattern TOK_PAT_OR . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 78
    primitive_pat  go to state 28
    event          go to state 29


state 49

   21 event_pattern: event_pattern TOK_COLON . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 79
    primitive_pat  go to state 28
    event          go to state 29


state 50

    9 rule: event_pattern TOK_ARROW . rule_body1
   10     | event_pattern TOK_ARROW . rule_body1 TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    rule_body1           go to state 80
    stmt                 go to state 72
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 51

   72 formalparamlistpp: TOK_LPAREN . formal_param_list TOK_RPAREN

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 81

    $default  reduce using rule 109 (formal_param_list)

    formal_param_list  go to state 82
    formal_param_plus  go to state 83
    formal_param       go to state 84
    type               go to state 85
    baseType           go to state 32


state 52

   37 event_decl: event_decl_hdr formalparamlistpp .

    $default  reduce using rule 37 (event_decl)


state 53

   40 primitive_pat: event TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 98
    literal              go to state 99


state 54

   27 function_decl: function_header error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 100


state 55

   26 function_decl: function_header formalparamlistpp . funcbody

    TOK_LBRACE  shift, and go to state 101

    $default  reduce using rule 73 (funcbody)

    funcbody  go to state 102


state 56

   31 variable_decl: type error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 103


state 57

   35 vname: TOK_IDENT .
   36      | TOK_IDENT . TOK_ASSIGN expr
   71 function_header: type TOK_IDENT .

    TOK_ASSIGN  shift, and go to state 104

    error       reduce using rule 35 (vname)
    error       [reduce using rule 71 (function_header)]
    TOK_LPAREN  reduce using rule 71 (function_header)
    $default    reduce using rule 35 (vname)


state 58

   28 variable_decl: type vlist . TOK_SEMICOLON
   29              | type vlist . error TOK_SEMICOLON
   30              | type vlist . TOK_COMMA error
   34 vlist: vlist . TOK_COMMA vname

    error          shift, and go to state 105
    TOK_COMMA      shift, and go to state 106
    TOK_SEMICOLON  shift, and go to state 107


state 59

   33 vlist: vname .

    $default  reduce using rule 33 (vlist)


state 60

   20 event_pattern: TOK_LPAREN event_pattern TOK_RPAREN .

    $default  reduce using rule 20 (event_pattern)


state 61

   18 class_decl: TOK_CLASS error TOK_SEMICOLON .

    $default  reduce using rule 18 (class_decl)


state 62

   32 variable_decl: TOK_IDENT error TOK_SEMICOLON .

    $default  reduce using rule 32 (variable_decl)


state 63

   45 evenparamlist: TOK_IDENT .

    $default  reduce using rule 45 (evenparamlist)


state 64

   43 evenparamlistpp: TOK_LPAREN evenparamlist . TOK_RPAREN
   46 evenparamlist: evenparamlist . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 108
    TOK_RPAREN  shift, and go to state 109


state 65

    8 rule_list: rule_list error TOK_SEMICOLON .

    $default  reduce using rule 8 (rule_list)


state 66

   47 stmt: TOK_SEMICOLON .

    $default  reduce using rule 47 (stmt)


state 67

   50 stmt: TOK_LBRACE . stmt_plus TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 110
    ret_stmt             go to state 73
    stmt_plus            go to state 111
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 68

   57 if_then_else_stmt: TOK_IF . expr stmt TOK_ELSE stmt
   58                  | TOK_IF . expr stmt
   59                  | TOK_IF . error stmt
   60                  | TOK_IF . expr error stmt
   61                  | TOK_IF . expr stmt TOK_ELSE error TOK_SEMICOLON

    error          shift, and go to state 112
    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 113
    literal              go to state 99


state 69

   53 ret_stmt: TOK_RETURN . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 114
    literal              go to state 99


state 70

   64 ref_expr: TOK_IDENT .
   65 function_invocation: TOK_IDENT . funcinvolistpp

    TOK_LPAREN  shift, and go to state 115

    TOK_LPAREN  [reduce using rule 64 (ref_expr)]
    $default    reduce using rule 64 (ref_expr)

    funcinvolistpp  go to state 116


state 71

   11 rule: event_pattern error rule_body1 .

    $default  reduce using rule 11 (rule)


state 72

   25 rule_body1: stmt .

    $default  reduce using rule 25 (rule_body1)


state 73

   52 stmt: ret_stmt .

    $default  reduce using rule 52 (stmt)


state 74

   51 stmt: if_then_else_stmt .

    $default  reduce using rule 51 (stmt)


state 75

   49 stmt: asg_stmt .

    $default  reduce using rule 49 (stmt)


state 76

   62 asg_stmt: ref_expr . TOK_ASSIGN expr
   63         | ref_expr . TOK_ASSIGN error TOK_SEMICOLON

    TOK_ASSIGN  shift, and go to state 117


state 77

   48 stmt: function_invocation .

    $default  reduce using rule 48 (stmt)


state 78

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   22              | event_pattern TOK_PAT_OR event_pattern .
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 47
    TOK_COLON     shift, and go to state 49

    $default  reduce using rule 22 (event_pattern)


state 79

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   21              | event_pattern TOK_COLON event_pattern .
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 47

    $default  reduce using rule 21 (event_pattern)


state 80

    9 rule: event_pattern TOK_ARROW rule_body1 .
   10     | event_pattern TOK_ARROW rule_body1 . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 118

    $default  reduce using rule 9 (rule)


state 81

  116 type: TOK_IDENT .

    $default  reduce using rule 116 (type)


state 82

   72 formalparamlistpp: TOK_LPAREN formal_param_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 119


state 83

  110 formal_param_list: formal_param_plus .
  112 formal_param_plus: formal_param_plus . TOK_COMMA formal_param

    TOK_COMMA  shift, and go to state 120

    $default  reduce using rule 110 (formal_param_list)


state 84

  111 formal_param_plus: formal_param .

    $default  reduce using rule 111 (formal_param_plus)


state 85

  113 formal_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 121


state 86

   83 expr: TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 122
    literal              go to state 99


state 87

   82 expr: TOK_BITNOT . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 123
    literal              go to state 99


state 88

   85 expr: TOK_NOT . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 124
    literal              go to state 99


state 89

   84 expr: TOK_LPAREN . expr TOK_RPAREN

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 125
    literal              go to state 99


state 90

  104 literal: TOK_UINTNUM .

    $default  reduce using rule 104 (literal)


state 91

  105 literal: TOK_DOUBLENUM .

    $default  reduce using rule 105 (literal)


state 92

  106 literal: TOK_STRCONST .

    $default  reduce using rule 106 (literal)


state 93

  107 literal: TOK_TRUE .

    $default  reduce using rule 107 (literal)


state 94

  108 literal: TOK_FALSE .

    $default  reduce using rule 108 (literal)


state 95

   80 expr: asg_stmt .

    $default  reduce using rule 80 (expr)


state 96

   62 asg_stmt: ref_expr . TOK_ASSIGN expr
   63         | ref_expr . TOK_ASSIGN error TOK_SEMICOLON
   79 expr: ref_expr .

    TOK_ASSIGN  shift, and go to state 117

    $default  reduce using rule 79 (expr)


state 97

   81 expr: function_invocation .

    $default  reduce using rule 81 (expr)


state 98

   40 primitive_pat: event TOK_BITOR expr .
   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142
    TOK_OR      shift, and go to state 143

    $default  reduce using rule 40 (primitive_pat)


state 99

   78 expr: literal .

    $default  reduce using rule 78 (expr)


state 100

   27 function_decl: function_header error TOK_SEMICOLON .

    $default  reduce using rule 27 (function_decl)


state 101

   74 funcbody: TOK_LBRACE . fun_rest TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 144

    variable_decl        go to state 145
    stmt                 go to state 110
    ret_stmt             go to state 73
    stmt_plus            go to state 146
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77
    fun_rest             go to state 147
    type                 go to state 148
    baseType             go to state 32


state 102

   26 function_decl: function_header formalparamlistpp funcbody .

    $default  reduce using rule 26 (function_decl)


state 103

   31 variable_decl: type error TOK_SEMICOLON .

    $default  reduce using rule 31 (variable_decl)


state 104

   36 vname: TOK_IDENT TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 149
    literal              go to state 99


state 105

   29 variable_decl: type vlist error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 150


state 106

   30 variable_decl: type vlist TOK_COMMA . error
   34 vlist: vlist TOK_COMMA . vname

    error      shift, and go to state 151
    TOK_IDENT  shift, and go to state 152

    vname  go to state 153


state 107

   28 variable_decl: type vlist TOK_SEMICOLON .

    $default  reduce using rule 28 (variable_decl)


state 108

   46 evenparamlist: evenparamlist TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 154


state 109

   43 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN .

    $default  reduce using rule 43 (evenparamlistpp)


state 110

   54 stmt_plus: stmt .

    $default  reduce using rule 54 (stmt_plus)


state 111

   50 stmt: TOK_LBRACE stmt_plus . TOK_RBRACE
   55 stmt_plus: stmt_plus . stmt
   56          | stmt_plus . error stmt

    error          shift, and go to state 155
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_RBRACE     shift, and go to state 156
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 157
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 112

   59 if_then_else_stmt: TOK_IF error . stmt

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 158
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 113

   57 if_then_else_stmt: TOK_IF expr . stmt TOK_ELSE stmt
   58                  | TOK_IF expr . stmt
   60                  | TOK_IF expr . error stmt
   61                  | TOK_IF expr . stmt TOK_ELSE error TOK_SEMICOLON
   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    error          shift, and go to state 159
    TOK_PLUS       shift, and go to state 126
    TOK_MINUS      shift, and go to state 127
    TOK_MULT       shift, and go to state 128
    TOK_DIV        shift, and go to state 129
    TOK_MOD        shift, and go to state 130
    TOK_BITAND     shift, and go to state 131
    TOK_BITOR      shift, and go to state 132
    TOK_BITXOR     shift, and go to state 133
    TOK_SHL        shift, and go to state 134
    TOK_SHR        shift, and go to state 135
    TOK_GT         shift, and go to state 136
    TOK_LT         shift, and go to state 137
    TOK_GE         shift, and go to state 138
    TOK_LE         shift, and go to state 139
    TOK_EQ         shift, and go to state 140
    TOK_NE         shift, and go to state 141
    TOK_AND        shift, and go to state 142
    TOK_OR         shift, and go to state 143
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 160
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 114

   53 ret_stmt: TOK_RETURN expr .
   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142
    TOK_OR      shift, and go to state 143

    $default  reduce using rule 53 (ret_stmt)


state 115

   66 funcinvolistpp: TOK_LPAREN . expr_list TOK_RPAREN

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    $default  reduce using rule 67 (expr_list)

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr_list            go to state 161
    expr_plus            go to state 162
    expr                 go to state 163
    literal              go to state 99


state 116

   65 function_invocation: TOK_IDENT funcinvolistpp .

    $default  reduce using rule 65 (function_invocation)


state 117

   62 asg_stmt: ref_expr TOK_ASSIGN . expr
   63         | ref_expr TOK_ASSIGN . error TOK_SEMICOLON

    error          shift, and go to state 164
    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 165
    literal              go to state 99


state 118

   10 rule: event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON .

    $default  reduce using rule 10 (rule)


state 119

   72 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN .

    $default  reduce using rule 72 (formalparamlistpp)


state 120

  112 formal_param_plus: formal_param_plus TOK_COMMA . formal_param

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 81

    formal_param  go to state 166
    type          go to state 85
    baseType      go to state 32


state 121

  113 formal_param: type TOK_IDENT .

    $default  reduce using rule 113 (formal_param)


state 122

   83 expr: TOK_MINUS expr .
   86     | expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 128
    TOK_DIV   shift, and go to state 129
    TOK_MOD   shift, and go to state 130

    $default  reduce using rule 83 (expr)


state 123

   82 expr: TOK_BITNOT expr .
   86     | expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 126
    TOK_MINUS  shift, and go to state 127
    TOK_MULT   shift, and go to state 128
    TOK_DIV    shift, and go to state 129
    TOK_MOD    shift, and go to state 130
    TOK_SHL    shift, and go to state 134
    TOK_SHR    shift, and go to state 135

    $default  reduce using rule 82 (expr)


state 124

   85 expr: TOK_NOT expr .
   86     | expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141

    $default  reduce using rule 85 (expr)


state 125

   84 expr: TOK_LPAREN expr . TOK_RPAREN
   86     | expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142
    TOK_OR      shift, and go to state 143
    TOK_RPAREN  shift, and go to state 167


state 126

  103 expr: expr TOK_PLUS . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 168
    literal              go to state 99


state 127

   96 expr: expr TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 169
    literal              go to state 99


state 128

   99 expr: expr TOK_MULT . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 170
    literal              go to state 99


state 129

   98 expr: expr TOK_DIV . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 171
    literal              go to state 99


state 130

  102 expr: expr TOK_MOD . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 172
    literal              go to state 99


state 131

  100 expr: expr TOK_BITAND . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 173
    literal              go to state 99


state 132

   95 expr: expr TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 174
    literal              go to state 99


state 133

   86 expr: expr TOK_BITXOR . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 175
    literal              go to state 99


state 134

   87 expr: expr TOK_SHL . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 176
    literal              go to state 99


state 135

   92 expr: expr TOK_SHR . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 177
    literal              go to state 99


state 136

   93 expr: expr TOK_GT . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 178
    literal              go to state 99


state 137

   89 expr: expr TOK_LT . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 179
    literal              go to state 99


state 138

   91 expr: expr TOK_GE . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 180
    literal              go to state 99


state 139

   88 expr: expr TOK_LE . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 181
    literal              go to state 99


state 140

   90 expr: expr TOK_EQ . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 182
    literal              go to state 99


state 141

   97 expr: expr TOK_NE . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 183
    literal              go to state 99


state 142

  101 expr: expr TOK_AND . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 184
    literal              go to state 99


state 143

   94 expr: expr TOK_OR . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 185
    literal              go to state 99


state 144

   32 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   64 ref_expr: TOK_IDENT .
   65 function_invocation: TOK_IDENT . funcinvolistpp
  116 type: TOK_IDENT .

    error       shift, and go to state 41
    TOK_LPAREN  shift, and go to state 115

    error       [reduce using rule 116 (type)]
    TOK_ASSIGN  reduce using rule 64 (ref_expr)
    TOK_IDENT   reduce using rule 116 (type)

    funcinvolistpp  go to state 116


state 145

   76 fun_rest: variable_decl . stmt_plus
   77         | variable_decl . error

    error          shift, and go to state 186
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 110
    ret_stmt             go to state 73
    stmt_plus            go to state 187
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 146

   55 stmt_plus: stmt_plus . stmt
   56          | stmt_plus . error stmt
   75 fun_rest: stmt_plus .

    error          shift, and go to state 155
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    TOK_RBRACE  reduce using rule 75 (fun_rest)

    stmt                 go to state 157
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 147

   74 funcbody: TOK_LBRACE fun_rest . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 188


state 148

   28 variable_decl: type . vlist TOK_SEMICOLON
   29              | type . vlist error TOK_SEMICOLON
   30              | type . vlist TOK_COMMA error
   31              | type . error TOK_SEMICOLON

    error      shift, and go to state 56
    TOK_IDENT  shift, and go to state 152

    vlist  go to state 58
    vname  go to state 59


state 149

   36 vname: TOK_IDENT TOK_ASSIGN expr .
   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142
    TOK_OR      shift, and go to state 143

    $default  reduce using rule 36 (vname)


state 150

   29 variable_decl: type vlist error TOK_SEMICOLON .

    $default  reduce using rule 29 (variable_decl)


state 151

   30 variable_decl: type vlist TOK_COMMA error .

    $default  reduce using rule 30 (variable_decl)


state 152

   35 vname: TOK_IDENT .
   36      | TOK_IDENT . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 104

    $default  reduce using rule 35 (vname)


state 153

   34 vlist: vlist TOK_COMMA vname .

    $default  reduce using rule 34 (vlist)


state 154

   46 evenparamlist: evenparamlist TOK_COMMA TOK_IDENT .

    $default  reduce using rule 46 (evenparamlist)


state 155

   56 stmt_plus: stmt_plus error . stmt

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 189
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 156

   50 stmt: TOK_LBRACE stmt_plus TOK_RBRACE .

    $default  reduce using rule 50 (stmt)


state 157

   55 stmt_plus: stmt_plus stmt .

    $default  reduce using rule 55 (stmt_plus)


state 158

   59 if_then_else_stmt: TOK_IF error stmt .

    $default  reduce using rule 59 (if_then_else_stmt)


state 159

   60 if_then_else_stmt: TOK_IF expr error . stmt

    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 190
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 160

   57 if_then_else_stmt: TOK_IF expr stmt . TOK_ELSE stmt
   58                  | TOK_IF expr stmt .
   61                  | TOK_IF expr stmt . TOK_ELSE error TOK_SEMICOLON

    TOK_ELSE  shift, and go to state 191

    TOK_ELSE  [reduce using rule 58 (if_then_else_stmt)]
    $default  reduce using rule 58 (if_then_else_stmt)


state 161

   66 funcinvolistpp: TOK_LPAREN expr_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 192


state 162

   68 expr_list: expr_plus .
   70 expr_plus: expr_plus . TOK_COMMA expr

    TOK_COMMA  shift, and go to state 193

    $default  reduce using rule 68 (expr_list)


state 163

   69 expr_plus: expr .
   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142
    TOK_OR      shift, and go to state 143

    $default  reduce using rule 69 (expr_plus)


state 164

   63 asg_stmt: ref_expr TOK_ASSIGN error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 194


state 165

   62 asg_stmt: ref_expr TOK_ASSIGN expr .
   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142
    TOK_OR      shift, and go to state 143

    $default  reduce using rule 62 (asg_stmt)


state 166

  112 formal_param_plus: formal_param_plus TOK_COMMA formal_param .

    $default  reduce using rule 112 (formal_param_plus)


state 167

   84 expr: TOK_LPAREN expr TOK_RPAREN .

    $default  reduce using rule 84 (expr)


state 168

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr
  103     | expr TOK_PLUS expr .

    TOK_MULT  shift, and go to state 128
    TOK_DIV   shift, and go to state 129
    TOK_MOD   shift, and go to state 130

    $default  reduce using rule 103 (expr)


state 169

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   96     | expr TOK_MINUS expr .
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 128
    TOK_DIV   shift, and go to state 129
    TOK_MOD   shift, and go to state 130

    $default  reduce using rule 96 (expr)


state 170

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
   99     | expr TOK_MULT expr .
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    $default  reduce using rule 99 (expr)


state 171

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   98     | expr TOK_DIV expr .
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    $default  reduce using rule 98 (expr)


state 172

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  102     | expr TOK_MOD expr .
  103     | expr . TOK_PLUS expr

    $default  reduce using rule 102 (expr)


state 173

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  100     | expr TOK_BITAND expr .
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 126
    TOK_MINUS  shift, and go to state 127
    TOK_MULT   shift, and go to state 128
    TOK_DIV    shift, and go to state 129
    TOK_MOD    shift, and go to state 130
    TOK_SHL    shift, and go to state 134
    TOK_SHR    shift, and go to state 135

    $default  reduce using rule 100 (expr)


state 174

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   95     | expr TOK_BITOR expr .
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    $default  reduce using rule 95 (expr)


state 175

   86 expr: expr . TOK_BITXOR expr
   86     | expr TOK_BITXOR expr .
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    $default  reduce using rule 86 (expr)


state 176

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   87     | expr TOK_SHL expr .
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 126
    TOK_MINUS  shift, and go to state 127
    TOK_MULT   shift, and go to state 128
    TOK_DIV    shift, and go to state 129
    TOK_MOD    shift, and go to state 130

    $default  reduce using rule 87 (expr)


state 177

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   92     | expr TOK_SHR expr .
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 126
    TOK_MINUS  shift, and go to state 127
    TOK_MULT   shift, and go to state 128
    TOK_DIV    shift, and go to state 129
    TOK_MOD    shift, and go to state 130

    $default  reduce using rule 92 (expr)


state 178

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   93     | expr TOK_GT expr .
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 93 (expr)


state 179

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   89     | expr TOK_LT expr .
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 89 (expr)


state 180

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   91     | expr TOK_GE expr .
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 91 (expr)


state 181

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   88     | expr TOK_LE expr .
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 88 (expr)


state 182

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   90     | expr TOK_EQ expr .
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 90 (expr)


state 183

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   97     | expr TOK_NE expr .
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 97 (expr)


state 184

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  101     | expr TOK_AND expr .
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141

    $default  reduce using rule 101 (expr)


state 185

   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   94     | expr TOK_OR expr .
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142

    $default  reduce using rule 94 (expr)


state 186

   77 fun_rest: variable_decl error .

    $default  reduce using rule 77 (fun_rest)


state 187

   55 stmt_plus: stmt_plus . stmt
   56          | stmt_plus . error stmt
   76 fun_rest: variable_decl stmt_plus .

    error          shift, and go to state 155
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    TOK_RBRACE  reduce using rule 76 (fun_rest)

    stmt                 go to state 157
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 188

   74 funcbody: TOK_LBRACE fun_rest TOK_RBRACE .

    $default  reduce using rule 74 (funcbody)


state 189

   56 stmt_plus: stmt_plus error stmt .

    $default  reduce using rule 56 (stmt_plus)


state 190

   60 if_then_else_stmt: TOK_IF expr error stmt .

    $default  reduce using rule 60 (if_then_else_stmt)


state 191

   57 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE . stmt
   61                  | TOK_IF expr stmt TOK_ELSE . error TOK_SEMICOLON

    error          shift, and go to state 195
    TOK_SEMICOLON  shift, and go to state 66
    TOK_LBRACE     shift, and go to state 67
    TOK_IF         shift, and go to state 68
    TOK_RETURN     shift, and go to state 69
    TOK_IDENT      shift, and go to state 70

    stmt                 go to state 196
    ret_stmt             go to state 73
    if_then_else_stmt    go to state 74
    asg_stmt             go to state 75
    ref_expr             go to state 76
    function_invocation  go to state 77


state 192

   66 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN .

    $default  reduce using rule 66 (funcinvolistpp)


state 193

   70 expr_plus: expr_plus TOK_COMMA . expr

    TOK_MINUS      shift, and go to state 86
    TOK_BITNOT     shift, and go to state 87
    TOK_NOT        shift, and go to state 88
    TOK_LPAREN     shift, and go to state 89
    TOK_UINTNUM    shift, and go to state 90
    TOK_DOUBLENUM  shift, and go to state 91
    TOK_STRCONST   shift, and go to state 92
    TOK_TRUE       shift, and go to state 93
    TOK_FALSE      shift, and go to state 94
    TOK_IDENT      shift, and go to state 70

    asg_stmt             go to state 95
    ref_expr             go to state 96
    function_invocation  go to state 97
    expr                 go to state 197
    literal              go to state 99


state 194

   63 asg_stmt: ref_expr TOK_ASSIGN error TOK_SEMICOLON .

    $default  reduce using rule 63 (asg_stmt)


state 195

   61 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 198


state 196

   57 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt .

    $default  reduce using rule 57 (if_then_else_stmt)


state 197

   70 expr_plus: expr_plus TOK_COMMA expr .
   86 expr: expr . TOK_BITXOR expr
   87     | expr . TOK_SHL expr
   88     | expr . TOK_LE expr
   89     | expr . TOK_LT expr
   90     | expr . TOK_EQ expr
   91     | expr . TOK_GE expr
   92     | expr . TOK_SHR expr
   93     | expr . TOK_GT expr
   94     | expr . TOK_OR expr
   95     | expr . TOK_BITOR expr
   96     | expr . TOK_MINUS expr
   97     | expr . TOK_NE expr
   98     | expr . TOK_DIV expr
   99     | expr . TOK_MULT expr
  100     | expr . TOK_BITAND expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_MOD expr
  103     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 126
    TOK_MINUS   shift, and go to state 127
    TOK_MULT    shift, and go to state 128
    TOK_DIV     shift, and go to state 129
    TOK_MOD     shift, and go to state 130
    TOK_BITAND  shift, and go to state 131
    TOK_BITOR   shift, and go to state 132
    TOK_BITXOR  shift, and go to state 133
    TOK_SHL     shift, and go to state 134
    TOK_SHR     shift, and go to state 135
    TOK_GT      shift, and go to state 136
    TOK_LT      shift, and go to state 137
    TOK_GE      shift, and go to state 138
    TOK_LE      shift, and go to state 139
    TOK_EQ      shift, and go to state 140
    TOK_NE      shift, and go to state 141
    TOK_AND     shift, and go to state 142
    TOK_OR      shift, and go to state 143

    $default  reduce using rule 70 (expr_plus)


state 198

   61 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE error TOK_SEMICOLON .

    $default  reduce using rule 61 (if_then_else_stmt)
