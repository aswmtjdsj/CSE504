Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_UMINUS
   TOK_LBRACK
   TOK_RBRACK
   TOK_QMARK
   TOK_BREAK
   TOK_BIT
   TOK_ENUM
   TOK_LONG
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_DOT


State 18 conflicts: 1 shift/reduce
State 58 conflicts: 1 reduce/reduce
State 73 conflicts: 1 shift/reduce
State 121 conflicts: 18 shift/reduce
State 153 conflicts: 1 shift/reduce
State 170 conflicts: 1 shift/reduce


Grammar

    0 $accept: specification $end

    1 specification: ifc_decl_star
    2              | ifc_decl_star rule_list

    3 ifc_decl_star: /* empty */
    4              | ifc_decl_star ifc_decl
    5              | ifc_decl_star error TOK_SEMICOLON

    6 rule_list: rule
    7          | rule_list rule
    8          | rule_list error TOK_SEMICOLON

    9 rule: event_pattern TOK_ARROW rule_body1
   10     | event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON
   11     | event_pattern error rule_body1

   12 ifc_decl: TOK_SEMICOLON
   13         | function_decl
   14         | variable_decl
   15         | event_decl
   16         | class_decl

   17 class_decl: TOK_CLASS TOK_IDENT
   18           | TOK_CLASS error TOK_SEMICOLON

   19 event_pattern: primitive_pat
   20              | TOK_LPAREN event_pattern TOK_RPAREN
   21              | event_pattern TOK_COLON event_pattern
   22              | event_pattern TOK_PAT_OR event_pattern
   23              | event_pattern TOK_PAT_STAR
   24              | TOK_NOT event_pattern

   25 rule_body1: stmt

   26 function_decl: function_header formalparamlistpp funcbody
   27              | function_header error TOK_SEMICOLON

   28 variable_decl: type vlist TOK_SEMICOLON
   29              | type vlist error TOK_SEMICOLON
   30              | type vlist TOK_COMMA error
   31              | type error TOK_SEMICOLON
   32              | TOK_IDENT error TOK_SEMICOLON

   33 vlist: vname
   34      | vlist TOK_COMMA vname

   35 vname: TOK_IDENT
   36      | TOK_IDENT TOK_ASSIGN expr

   37 event_decl: event_decl_hdr formalparamlistpp

   38 event_decl_hdr: TOK_EVENT TOK_IDENT
   39               | TOK_EVENT error

   40 primitive_pat: event
   41              | event TOK_BITOR expr

   42 event: TOK_ANY
   43      | TOK_IDENT evenparamlistpp

   44 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN

   45 evenparamlist: /* empty */
   46              | TOK_IDENT
   47              | evenparamlist TOK_COMMA TOK_IDENT

   48 stmt: TOK_SEMICOLON
   49     | function_invocation
   50     | asg_stmt
   51     | TOK_LBRACE stmt_plus TOK_RBRACE
   52     | if_then_else_stmt
   53     | ret_stmt
   54     | TOK_WHILE expr stmt
   55     | prt_expr TOK_SEMICOLON
   56     | TOK_LBRACE error TOK_RBRACE

   57 ret_stmt: TOK_RETURN expr

   58 stmt_plus: stmt
   59          | stmt_plus stmt
   60          | stmt_plus error stmt

   61 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt
   62                  | TOK_IF expr stmt
   63                  | TOK_IF error stmt
   64                  | TOK_IF expr error stmt
   65                  | TOK_IF expr stmt TOK_ELSE error TOK_SEMICOLON

   66 asg_stmt: ref_expr TOK_ASSIGN expr
   67         | ref_expr TOK_ASSIGN error TOK_SEMICOLON

   68 ref_expr: TOK_IDENT

   69 function_invocation: TOK_IDENT funcinvolistpp

   70 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN

   71 expr_list: /* empty */
   72          | expr_plus

   73 expr_plus: expr
   74          | expr_plus TOK_COMMA expr

   75 function_header: type TOK_IDENT

   76 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN

   77 funcbody: /* empty */
   78         | TOK_LBRACE fun_rest TOK_RBRACE

   79 fun_rest: stmt_plus
   80         | variable_decl stmt_plus
   81         | variable_decl error

   82 expr: literal
   83     | prt_expr
   84     | ref_expr
   85     | asg_stmt
   86     | function_invocation
   87     | TOK_BITNOT expr
   88     | TOK_MINUS expr
   89     | TOK_LPAREN expr TOK_RPAREN
   90     | TOK_NOT expr
   91     | expr TOK_BITXOR expr
   92     | expr TOK_SHL expr
   93     | expr TOK_LE expr
   94     | expr TOK_LT expr
   95     | expr TOK_EQ expr
   96     | expr TOK_GE expr
   97     | expr TOK_SHR expr
   98     | expr TOK_GT expr
   99     | expr TOK_OR expr
  100     | expr TOK_BITOR expr
  101     | expr TOK_MINUS expr
  102     | expr TOK_NE expr
  103     | expr TOK_DIV expr
  104     | expr TOK_MULT expr
  105     | expr TOK_BITAND expr
  106     | expr TOK_AND expr
  107     | expr TOK_MOD expr
  108     | expr TOK_PLUS expr

  109 prt_expr: TOK_PRINT expr

  110 literal: TOK_UINTNUM
  111        | TOK_DOUBLENUM
  112        | TOK_STRCONST
  113        | TOK_TRUE
  114        | TOK_FALSE

  115 formal_param_list: /* empty */
  116                  | formal_param_plus

  117 formal_param_plus: formal_param
  118                  | formal_param_plus TOK_COMMA formal_param

  119 formal_param: type TOK_IDENT

  120 type: baseType
  121     | TOK_UNSIGNED baseType
  122     | TOK_IDENT

  123 baseType: TOK_INT
  124         | TOK_BOOL
  125         | TOK_DOUBLE
  126         | TOK_VOID
  127         | TOK_STRING
  128         | TOK_BYTE


Terminals, with rules where they appear

$end (0) 0
error (256) 5 8 11 18 27 29 30 31 32 39 56 60 63 64 65 67 81
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 23
TOK_PAT_OR (260) 22
TOK_PAT_NOT (261)
TOK_PLUS (262) 108
TOK_MINUS (263) 88 101
TOK_UMINUS (264)
TOK_MULT (265) 104
TOK_DIV (266) 103
TOK_MOD (267) 107
TOK_BITAND (268) 105
TOK_BITOR (269) 41 100
TOK_BITNOT (270) 87
TOK_BITXOR (271) 91
TOK_SHL (272) 92
TOK_SHR (273) 97
TOK_GT (274) 98
TOK_LT (275) 94
TOK_GE (276) 96
TOK_LE (277) 93
TOK_EQ (278) 95
TOK_NE (279) 102
TOK_AND (280) 106
TOK_OR (281) 99
TOK_NOT (282) 24 90
TOK_COMMA (283) 30 34 47 74 118
TOK_ASSIGN (284) 36 66 67
TOK_SEMICOLON (285) 5 8 10 12 18 27 28 29 31 32 48 55 65 67
TOK_COLON (286) 21
TOK_ARROW (287) 9 10
TOK_LBRACE (288) 51 56 78
TOK_RBRACE (289) 51 56 78
TOK_LPAREN (290) 20 44 70 76 89
TOK_RPAREN (291) 20 44 70 76 89
TOK_LBRACK (292)
TOK_RBRACK (293)
TOK_QMARK (294)
TOK_IF (295) 61 62 63 64 65
TOK_ELSE (296) 61 65
TOK_CLASS (297) 17 18
TOK_RETURN (298) 57
TOK_EVENT (299) 38 39
TOK_ANY (300) 42
TOK_PRINT (301) 109
TOK_WHILE (302) 54
TOK_BREAK (303)
TOK_UINTNUM (304) 110
TOK_DOUBLENUM (305) 111
TOK_VOID (306) 126
TOK_STRING (307) 127
TOK_STRCONST (308) 112
TOK_BIT (309)
TOK_ENUM (310)
TOK_LONG (311)
TOK_INT (312) 123
TOK_UNSIGNED (313) 121
TOK_BOOL (314) 124
TOK_BYTE (315) 128
TOK_DOUBLE (316) 125
TOK_SHORT (317)
TOK_TRUE (318) 113
TOK_FALSE (319) 114
TOK_IDENT (320) 17 32 35 36 38 43 46 47 68 69 75 119 122
TOK_DOUBLE_COLON (321)
TOK_DOT (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
specification (69)
    on left: 1 2, on right: 0
ifc_decl_star (70)
    on left: 3 4 5, on right: 1 2 4 5
rule_list (71)
    on left: 6 7 8, on right: 2 7 8
rule (72)
    on left: 9 10 11, on right: 6 7
ifc_decl (73)
    on left: 12 13 14 15 16, on right: 4
class_decl (74)
    on left: 17 18, on right: 16
event_pattern (75)
    on left: 19 20 21 22 23 24, on right: 9 10 11 20 21 22 23 24
rule_body1 (76)
    on left: 25, on right: 9 10 11
function_decl (77)
    on left: 26 27, on right: 13
variable_decl (78)
    on left: 28 29 30 31 32, on right: 14 80 81
vlist (79)
    on left: 33 34, on right: 28 29 30 34
vname (80)
    on left: 35 36, on right: 33 34
event_decl (81)
    on left: 37, on right: 15
event_decl_hdr (82)
    on left: 38 39, on right: 37
primitive_pat (83)
    on left: 40 41, on right: 19
event (84)
    on left: 42 43, on right: 40 41
evenparamlistpp (85)
    on left: 44, on right: 43
evenparamlist (86)
    on left: 45 46 47, on right: 44 47
stmt (87)
    on left: 48 49 50 51 52 53 54 55 56, on right: 25 54 58 59 60 61
    62 63 64 65
ret_stmt (88)
    on left: 57, on right: 53
stmt_plus (89)
    on left: 58 59 60, on right: 51 59 60 79 80
if_then_else_stmt (90)
    on left: 61 62 63 64 65, on right: 52
asg_stmt (91)
    on left: 66 67, on right: 50 85
ref_expr (92)
    on left: 68, on right: 66 67 84
function_invocation (93)
    on left: 69, on right: 49 86
funcinvolistpp (94)
    on left: 70, on right: 69
expr_list (95)
    on left: 71 72, on right: 70
expr_plus (96)
    on left: 73 74, on right: 72 74
function_header (97)
    on left: 75, on right: 26 27
formalparamlistpp (98)
    on left: 76, on right: 26 37
funcbody (99)
    on left: 77 78, on right: 26
fun_rest (100)
    on left: 79 80 81, on right: 78
expr (101)
    on left: 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99
    100 101 102 103 104 105 106 107 108, on right: 36 41 54 57 61 62
    64 65 66 73 74 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
    103 104 105 106 107 108 109
prt_expr (102)
    on left: 109, on right: 55 83
literal (103)
    on left: 110 111 112 113 114, on right: 82
formal_param_list (104)
    on left: 115 116, on right: 76
formal_param_plus (105)
    on left: 117 118, on right: 116 118
formal_param (106)
    on left: 119, on right: 117 118
type (107)
    on left: 120 121 122, on right: 28 29 30 31 75 119
baseType (108)
    on left: 123 124 125 126 127 128, on right: 120 121


state 0

    0 $accept: . specification $end

    $default  reduce using rule 3 (ifc_decl_star)

    specification  go to state 1
    ifc_decl_star  go to state 2


state 1

    0 $accept: specification . $end

    $end  shift, and go to state 3


state 2

    1 specification: ifc_decl_star .
    2              | ifc_decl_star . rule_list
    4 ifc_decl_star: ifc_decl_star . ifc_decl
    5              | ifc_decl_star . error TOK_SEMICOLON

    error          shift, and go to state 4
    TOK_NOT        shift, and go to state 5
    TOK_SEMICOLON  shift, and go to state 6
    TOK_LPAREN     shift, and go to state 7
    TOK_CLASS      shift, and go to state 8
    TOK_EVENT      shift, and go to state 9
    TOK_ANY        shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 18

    $end  reduce using rule 1 (specification)

    rule_list        go to state 19
    rule             go to state 20
    ifc_decl         go to state 21
    class_decl       go to state 22
    event_pattern    go to state 23
    function_decl    go to state 24
    variable_decl    go to state 25
    event_decl       go to state 26
    event_decl_hdr   go to state 27
    primitive_pat    go to state 28
    event            go to state 29
    function_header  go to state 30
    type             go to state 31
    baseType         go to state 32


state 3

    0 $accept: specification $end .

    $default  accept


state 4

    5 ifc_decl_star: ifc_decl_star error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 33


state 5

   24 event_pattern: TOK_NOT . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 35
    primitive_pat  go to state 28
    event          go to state 29


state 6

   12 ifc_decl: TOK_SEMICOLON .

    $default  reduce using rule 12 (ifc_decl)


state 7

   20 event_pattern: TOK_LPAREN . event_pattern TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 36
    primitive_pat  go to state 28
    event          go to state 29


state 8

   17 class_decl: TOK_CLASS . TOK_IDENT
   18           | TOK_CLASS . error TOK_SEMICOLON

    error      shift, and go to state 37
    TOK_IDENT  shift, and go to state 38


state 9

   38 event_decl_hdr: TOK_EVENT . TOK_IDENT
   39               | TOK_EVENT . error

    error      shift, and go to state 39
    TOK_IDENT  shift, and go to state 40


state 10

   42 event: TOK_ANY .

    $default  reduce using rule 42 (event)


state 11

  126 baseType: TOK_VOID .

    $default  reduce using rule 126 (baseType)


state 12

  127 baseType: TOK_STRING .

    $default  reduce using rule 127 (baseType)


state 13

  123 baseType: TOK_INT .

    $default  reduce using rule 123 (baseType)


state 14

  121 type: TOK_UNSIGNED . baseType

    TOK_VOID    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_INT     shift, and go to state 13
    TOK_BOOL    shift, and go to state 15
    TOK_BYTE    shift, and go to state 16
    TOK_DOUBLE  shift, and go to state 17

    baseType  go to state 41


state 15

  124 baseType: TOK_BOOL .

    $default  reduce using rule 124 (baseType)


state 16

  128 baseType: TOK_BYTE .

    $default  reduce using rule 128 (baseType)


state 17

  125 baseType: TOK_DOUBLE .

    $default  reduce using rule 125 (baseType)


state 18

   32 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   43 event: TOK_IDENT . evenparamlistpp
  122 type: TOK_IDENT .

    error       shift, and go to state 42
    TOK_LPAREN  shift, and go to state 43

    error      [reduce using rule 122 (type)]
    TOK_IDENT  reduce using rule 122 (type)

    evenparamlistpp  go to state 44


state 19

    2 specification: ifc_decl_star rule_list .
    7 rule_list: rule_list . rule
    8          | rule_list . error TOK_SEMICOLON

    error       shift, and go to state 45
    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    $end  reduce using rule 2 (specification)

    rule           go to state 46
    event_pattern  go to state 23
    primitive_pat  go to state 28
    event          go to state 29


state 20

    6 rule_list: rule .

    $default  reduce using rule 6 (rule_list)


state 21

    4 ifc_decl_star: ifc_decl_star ifc_decl .

    $default  reduce using rule 4 (ifc_decl_star)


state 22

   16 ifc_decl: class_decl .

    $default  reduce using rule 16 (ifc_decl)


state 23

    9 rule: event_pattern . TOK_ARROW rule_body1
   10     | event_pattern . TOK_ARROW rule_body1 TOK_SEMICOLON
   11     | event_pattern . error rule_body1
   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    error         shift, and go to state 47
    TOK_PAT_STAR  shift, and go to state 48
    TOK_PAT_OR    shift, and go to state 49
    TOK_COLON     shift, and go to state 50
    TOK_ARROW     shift, and go to state 51


state 24

   13 ifc_decl: function_decl .

    $default  reduce using rule 13 (ifc_decl)


state 25

   14 ifc_decl: variable_decl .

    $default  reduce using rule 14 (ifc_decl)


state 26

   15 ifc_decl: event_decl .

    $default  reduce using rule 15 (ifc_decl)


state 27

   37 event_decl: event_decl_hdr . formalparamlistpp

    TOK_LPAREN  shift, and go to state 52

    formalparamlistpp  go to state 53


state 28

   19 event_pattern: primitive_pat .

    $default  reduce using rule 19 (event_pattern)


state 29

   40 primitive_pat: event .
   41              | event . TOK_BITOR expr

    TOK_BITOR  shift, and go to state 54

    $default  reduce using rule 40 (primitive_pat)


state 30

   26 function_decl: function_header . formalparamlistpp funcbody
   27              | function_header . error TOK_SEMICOLON

    error       shift, and go to state 55
    TOK_LPAREN  shift, and go to state 52

    formalparamlistpp  go to state 56


state 31

   28 variable_decl: type . vlist TOK_SEMICOLON
   29              | type . vlist error TOK_SEMICOLON
   30              | type . vlist TOK_COMMA error
   31              | type . error TOK_SEMICOLON
   75 function_header: type . TOK_IDENT

    error      shift, and go to state 57
    TOK_IDENT  shift, and go to state 58

    vlist  go to state 59
    vname  go to state 60


state 32

  120 type: baseType .

    $default  reduce using rule 120 (type)


state 33

    5 ifc_decl_star: ifc_decl_star error TOK_SEMICOLON .

    $default  reduce using rule 5 (ifc_decl_star)


state 34

   43 event: TOK_IDENT . evenparamlistpp

    TOK_LPAREN  shift, and go to state 43

    evenparamlistpp  go to state 44


state 35

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR
   24              | TOK_NOT event_pattern .

    $default  reduce using rule 24 (event_pattern)


state 36

   20 event_pattern: TOK_LPAREN event_pattern . TOK_RPAREN
   21              | event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 48
    TOK_PAT_OR    shift, and go to state 49
    TOK_COLON     shift, and go to state 50
    TOK_RPAREN    shift, and go to state 61


state 37

   18 class_decl: TOK_CLASS error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 62


state 38

   17 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 17 (class_decl)


state 39

   39 event_decl_hdr: TOK_EVENT error .

    $default  reduce using rule 39 (event_decl_hdr)


state 40

   38 event_decl_hdr: TOK_EVENT TOK_IDENT .

    $default  reduce using rule 38 (event_decl_hdr)


state 41

  121 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 121 (type)


state 42

   32 variable_decl: TOK_IDENT error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 63


state 43

   44 evenparamlistpp: TOK_LPAREN . evenparamlist TOK_RPAREN

    TOK_IDENT  shift, and go to state 64

    $default  reduce using rule 45 (evenparamlist)

    evenparamlist  go to state 65


state 44

   43 event: TOK_IDENT evenparamlistpp .

    $default  reduce using rule 43 (event)


state 45

    8 rule_list: rule_list error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 66


state 46

    7 rule_list: rule_list rule .

    $default  reduce using rule 7 (rule_list)


state 47

   11 rule: event_pattern error . rule_body1

    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    rule_body1           go to state 74
    stmt                 go to state 75
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 48

   23 event_pattern: event_pattern TOK_PAT_STAR .

    $default  reduce using rule 23 (event_pattern)


state 49

   22 event_pattern: event_pattern TOK_PAT_OR . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 82
    primitive_pat  go to state 28
    event          go to state 29


state 50

   21 event_pattern: event_pattern TOK_COLON . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 83
    primitive_pat  go to state 28
    event          go to state 29


state 51

    9 rule: event_pattern TOK_ARROW . rule_body1
   10     | event_pattern TOK_ARROW . rule_body1 TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    rule_body1           go to state 84
    stmt                 go to state 75
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 52

   76 formalparamlistpp: TOK_LPAREN . formal_param_list TOK_RPAREN

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 85

    $default  reduce using rule 115 (formal_param_list)

    formal_param_list  go to state 86
    formal_param_plus  go to state 87
    formal_param       go to state 88
    type               go to state 89
    baseType           go to state 32


state 53

   37 event_decl: event_decl_hdr formalparamlistpp .

    $default  reduce using rule 37 (event_decl)


state 54

   41 primitive_pat: event TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 102
    prt_expr             go to state 103
    literal              go to state 104


state 55

   27 function_decl: function_header error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 105


state 56

   26 function_decl: function_header formalparamlistpp . funcbody

    TOK_LBRACE  shift, and go to state 106

    $default  reduce using rule 77 (funcbody)

    funcbody  go to state 107


state 57

   31 variable_decl: type error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 108


state 58

   35 vname: TOK_IDENT .
   36      | TOK_IDENT . TOK_ASSIGN expr
   75 function_header: type TOK_IDENT .

    TOK_ASSIGN  shift, and go to state 109

    error       reduce using rule 35 (vname)
    error       [reduce using rule 75 (function_header)]
    TOK_LPAREN  reduce using rule 75 (function_header)
    $default    reduce using rule 35 (vname)


state 59

   28 variable_decl: type vlist . TOK_SEMICOLON
   29              | type vlist . error TOK_SEMICOLON
   30              | type vlist . TOK_COMMA error
   34 vlist: vlist . TOK_COMMA vname

    error          shift, and go to state 110
    TOK_COMMA      shift, and go to state 111
    TOK_SEMICOLON  shift, and go to state 112


state 60

   33 vlist: vname .

    $default  reduce using rule 33 (vlist)


state 61

   20 event_pattern: TOK_LPAREN event_pattern TOK_RPAREN .

    $default  reduce using rule 20 (event_pattern)


state 62

   18 class_decl: TOK_CLASS error TOK_SEMICOLON .

    $default  reduce using rule 18 (class_decl)


state 63

   32 variable_decl: TOK_IDENT error TOK_SEMICOLON .

    $default  reduce using rule 32 (variable_decl)


state 64

   46 evenparamlist: TOK_IDENT .

    $default  reduce using rule 46 (evenparamlist)


state 65

   44 evenparamlistpp: TOK_LPAREN evenparamlist . TOK_RPAREN
   47 evenparamlist: evenparamlist . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 113
    TOK_RPAREN  shift, and go to state 114


state 66

    8 rule_list: rule_list error TOK_SEMICOLON .

    $default  reduce using rule 8 (rule_list)


state 67

   48 stmt: TOK_SEMICOLON .

    $default  reduce using rule 48 (stmt)


state 68

   51 stmt: TOK_LBRACE . stmt_plus TOK_RBRACE
   56     | TOK_LBRACE . error TOK_RBRACE

    error          shift, and go to state 115
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 116
    ret_stmt             go to state 76
    stmt_plus            go to state 117
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 69

   61 if_then_else_stmt: TOK_IF . expr stmt TOK_ELSE stmt
   62                  | TOK_IF . expr stmt
   63                  | TOK_IF . error stmt
   64                  | TOK_IF . expr error stmt
   65                  | TOK_IF . expr stmt TOK_ELSE error TOK_SEMICOLON

    error          shift, and go to state 118
    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 119
    prt_expr             go to state 103
    literal              go to state 104


state 70

   57 ret_stmt: TOK_RETURN . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 120
    prt_expr             go to state 103
    literal              go to state 104


state 71

  109 prt_expr: TOK_PRINT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 121
    prt_expr             go to state 103
    literal              go to state 104


state 72

   54 stmt: TOK_WHILE . expr stmt

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 122
    prt_expr             go to state 103
    literal              go to state 104


state 73

   68 ref_expr: TOK_IDENT .
   69 function_invocation: TOK_IDENT . funcinvolistpp

    TOK_LPAREN  shift, and go to state 123

    TOK_LPAREN  [reduce using rule 68 (ref_expr)]
    $default    reduce using rule 68 (ref_expr)

    funcinvolistpp  go to state 124


state 74

   11 rule: event_pattern error rule_body1 .

    $default  reduce using rule 11 (rule)


state 75

   25 rule_body1: stmt .

    $default  reduce using rule 25 (rule_body1)


state 76

   53 stmt: ret_stmt .

    $default  reduce using rule 53 (stmt)


state 77

   52 stmt: if_then_else_stmt .

    $default  reduce using rule 52 (stmt)


state 78

   50 stmt: asg_stmt .

    $default  reduce using rule 50 (stmt)


state 79

   66 asg_stmt: ref_expr . TOK_ASSIGN expr
   67         | ref_expr . TOK_ASSIGN error TOK_SEMICOLON

    TOK_ASSIGN  shift, and go to state 125


state 80

   49 stmt: function_invocation .

    $default  reduce using rule 49 (stmt)


state 81

   55 stmt: prt_expr . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 126


state 82

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   22              | event_pattern . TOK_PAT_OR event_pattern
   22              | event_pattern TOK_PAT_OR event_pattern .
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 48
    TOK_COLON     shift, and go to state 50

    $default  reduce using rule 22 (event_pattern)


state 83

   21 event_pattern: event_pattern . TOK_COLON event_pattern
   21              | event_pattern TOK_COLON event_pattern .
   22              | event_pattern . TOK_PAT_OR event_pattern
   23              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 48

    $default  reduce using rule 21 (event_pattern)


state 84

    9 rule: event_pattern TOK_ARROW rule_body1 .
   10     | event_pattern TOK_ARROW rule_body1 . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 127

    $default  reduce using rule 9 (rule)


state 85

  122 type: TOK_IDENT .

    $default  reduce using rule 122 (type)


state 86

   76 formalparamlistpp: TOK_LPAREN formal_param_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 128


state 87

  116 formal_param_list: formal_param_plus .
  118 formal_param_plus: formal_param_plus . TOK_COMMA formal_param

    TOK_COMMA  shift, and go to state 129

    $default  reduce using rule 116 (formal_param_list)


state 88

  117 formal_param_plus: formal_param .

    $default  reduce using rule 117 (formal_param_plus)


state 89

  119 formal_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 130


state 90

   88 expr: TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 131
    prt_expr             go to state 103
    literal              go to state 104


state 91

   87 expr: TOK_BITNOT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 132
    prt_expr             go to state 103
    literal              go to state 104


state 92

   90 expr: TOK_NOT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 133
    prt_expr             go to state 103
    literal              go to state 104


state 93

   89 expr: TOK_LPAREN . expr TOK_RPAREN

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 134
    prt_expr             go to state 103
    literal              go to state 104


state 94

  110 literal: TOK_UINTNUM .

    $default  reduce using rule 110 (literal)


state 95

  111 literal: TOK_DOUBLENUM .

    $default  reduce using rule 111 (literal)


state 96

  112 literal: TOK_STRCONST .

    $default  reduce using rule 112 (literal)


state 97

  113 literal: TOK_TRUE .

    $default  reduce using rule 113 (literal)


state 98

  114 literal: TOK_FALSE .

    $default  reduce using rule 114 (literal)


state 99

   85 expr: asg_stmt .

    $default  reduce using rule 85 (expr)


state 100

   66 asg_stmt: ref_expr . TOK_ASSIGN expr
   67         | ref_expr . TOK_ASSIGN error TOK_SEMICOLON
   84 expr: ref_expr .

    TOK_ASSIGN  shift, and go to state 125

    $default  reduce using rule 84 (expr)


state 101

   86 expr: function_invocation .

    $default  reduce using rule 86 (expr)


state 102

   41 primitive_pat: event TOK_BITOR expr .
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152

    $default  reduce using rule 41 (primitive_pat)


state 103

   83 expr: prt_expr .

    $default  reduce using rule 83 (expr)


state 104

   82 expr: literal .

    $default  reduce using rule 82 (expr)


state 105

   27 function_decl: function_header error TOK_SEMICOLON .

    $default  reduce using rule 27 (function_decl)


state 106

   78 funcbody: TOK_LBRACE . fun_rest TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 153

    variable_decl        go to state 154
    stmt                 go to state 116
    ret_stmt             go to state 76
    stmt_plus            go to state 155
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    fun_rest             go to state 156
    prt_expr             go to state 81
    type                 go to state 157
    baseType             go to state 32


state 107

   26 function_decl: function_header formalparamlistpp funcbody .

    $default  reduce using rule 26 (function_decl)


state 108

   31 variable_decl: type error TOK_SEMICOLON .

    $default  reduce using rule 31 (variable_decl)


state 109

   36 vname: TOK_IDENT TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 158
    prt_expr             go to state 103
    literal              go to state 104


state 110

   29 variable_decl: type vlist error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 159


state 111

   30 variable_decl: type vlist TOK_COMMA . error
   34 vlist: vlist TOK_COMMA . vname

    error      shift, and go to state 160
    TOK_IDENT  shift, and go to state 161

    vname  go to state 162


state 112

   28 variable_decl: type vlist TOK_SEMICOLON .

    $default  reduce using rule 28 (variable_decl)


state 113

   47 evenparamlist: evenparamlist TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 163


state 114

   44 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN .

    $default  reduce using rule 44 (evenparamlistpp)


state 115

   56 stmt: TOK_LBRACE error . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 164


state 116

   58 stmt_plus: stmt .

    $default  reduce using rule 58 (stmt_plus)


state 117

   51 stmt: TOK_LBRACE stmt_plus . TOK_RBRACE
   59 stmt_plus: stmt_plus . stmt
   60          | stmt_plus . error stmt

    error          shift, and go to state 165
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_RBRACE     shift, and go to state 166
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 167
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 118

   63 if_then_else_stmt: TOK_IF error . stmt

    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 168
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 119

   61 if_then_else_stmt: TOK_IF expr . stmt TOK_ELSE stmt
   62                  | TOK_IF expr . stmt
   64                  | TOK_IF expr . error stmt
   65                  | TOK_IF expr . stmt TOK_ELSE error TOK_SEMICOLON
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    error          shift, and go to state 169
    TOK_PLUS       shift, and go to state 135
    TOK_MINUS      shift, and go to state 136
    TOK_MULT       shift, and go to state 137
    TOK_DIV        shift, and go to state 138
    TOK_MOD        shift, and go to state 139
    TOK_BITAND     shift, and go to state 140
    TOK_BITOR      shift, and go to state 141
    TOK_BITXOR     shift, and go to state 142
    TOK_SHL        shift, and go to state 143
    TOK_SHR        shift, and go to state 144
    TOK_GT         shift, and go to state 145
    TOK_LT         shift, and go to state 146
    TOK_GE         shift, and go to state 147
    TOK_LE         shift, and go to state 148
    TOK_EQ         shift, and go to state 149
    TOK_NE         shift, and go to state 150
    TOK_AND        shift, and go to state 151
    TOK_OR         shift, and go to state 152
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 170
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 120

   57 ret_stmt: TOK_RETURN expr .
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152

    $default  reduce using rule 57 (ret_stmt)


state 121

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr
  109 prt_expr: TOK_PRINT expr .

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152

    TOK_PLUS    [reduce using rule 109 (prt_expr)]
    TOK_MINUS   [reduce using rule 109 (prt_expr)]
    TOK_MULT    [reduce using rule 109 (prt_expr)]
    TOK_DIV     [reduce using rule 109 (prt_expr)]
    TOK_MOD     [reduce using rule 109 (prt_expr)]
    TOK_BITAND  [reduce using rule 109 (prt_expr)]
    TOK_BITOR   [reduce using rule 109 (prt_expr)]
    TOK_BITXOR  [reduce using rule 109 (prt_expr)]
    TOK_SHL     [reduce using rule 109 (prt_expr)]
    TOK_SHR     [reduce using rule 109 (prt_expr)]
    TOK_GT      [reduce using rule 109 (prt_expr)]
    TOK_LT      [reduce using rule 109 (prt_expr)]
    TOK_GE      [reduce using rule 109 (prt_expr)]
    TOK_LE      [reduce using rule 109 (prt_expr)]
    TOK_EQ      [reduce using rule 109 (prt_expr)]
    TOK_NE      [reduce using rule 109 (prt_expr)]
    TOK_AND     [reduce using rule 109 (prt_expr)]
    TOK_OR      [reduce using rule 109 (prt_expr)]
    $default    reduce using rule 109 (prt_expr)


state 122

   54 stmt: TOK_WHILE expr . stmt
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS       shift, and go to state 135
    TOK_MINUS      shift, and go to state 136
    TOK_MULT       shift, and go to state 137
    TOK_DIV        shift, and go to state 138
    TOK_MOD        shift, and go to state 139
    TOK_BITAND     shift, and go to state 140
    TOK_BITOR      shift, and go to state 141
    TOK_BITXOR     shift, and go to state 142
    TOK_SHL        shift, and go to state 143
    TOK_SHR        shift, and go to state 144
    TOK_GT         shift, and go to state 145
    TOK_LT         shift, and go to state 146
    TOK_GE         shift, and go to state 147
    TOK_LE         shift, and go to state 148
    TOK_EQ         shift, and go to state 149
    TOK_NE         shift, and go to state 150
    TOK_AND        shift, and go to state 151
    TOK_OR         shift, and go to state 152
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 171
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 123

   70 funcinvolistpp: TOK_LPAREN . expr_list TOK_RPAREN

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    $default  reduce using rule 71 (expr_list)

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr_list            go to state 172
    expr_plus            go to state 173
    expr                 go to state 174
    prt_expr             go to state 103
    literal              go to state 104


state 124

   69 function_invocation: TOK_IDENT funcinvolistpp .

    $default  reduce using rule 69 (function_invocation)


state 125

   66 asg_stmt: ref_expr TOK_ASSIGN . expr
   67         | ref_expr TOK_ASSIGN . error TOK_SEMICOLON

    error          shift, and go to state 175
    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 176
    prt_expr             go to state 103
    literal              go to state 104


state 126

   55 stmt: prt_expr TOK_SEMICOLON .

    $default  reduce using rule 55 (stmt)


state 127

   10 rule: event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON .

    $default  reduce using rule 10 (rule)


state 128

   76 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN .

    $default  reduce using rule 76 (formalparamlistpp)


state 129

  118 formal_param_plus: formal_param_plus TOK_COMMA . formal_param

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 85

    formal_param  go to state 177
    type          go to state 89
    baseType      go to state 32


state 130

  119 formal_param: type TOK_IDENT .

    $default  reduce using rule 119 (formal_param)


state 131

   88 expr: TOK_MINUS expr .
   91     | expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 137
    TOK_DIV   shift, and go to state 138
    TOK_MOD   shift, and go to state 139

    $default  reduce using rule 88 (expr)


state 132

   87 expr: TOK_BITNOT expr .
   91     | expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 135
    TOK_MINUS  shift, and go to state 136
    TOK_MULT   shift, and go to state 137
    TOK_DIV    shift, and go to state 138
    TOK_MOD    shift, and go to state 139
    TOK_SHL    shift, and go to state 143
    TOK_SHR    shift, and go to state 144

    $default  reduce using rule 87 (expr)


state 133

   90 expr: TOK_NOT expr .
   91     | expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150

    $default  reduce using rule 90 (expr)


state 134

   89 expr: TOK_LPAREN expr . TOK_RPAREN
   91     | expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152
    TOK_RPAREN  shift, and go to state 178


state 135

  108 expr: expr TOK_PLUS . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 179
    prt_expr             go to state 103
    literal              go to state 104


state 136

  101 expr: expr TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 180
    prt_expr             go to state 103
    literal              go to state 104


state 137

  104 expr: expr TOK_MULT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 181
    prt_expr             go to state 103
    literal              go to state 104


state 138

  103 expr: expr TOK_DIV . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 182
    prt_expr             go to state 103
    literal              go to state 104


state 139

  107 expr: expr TOK_MOD . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 183
    prt_expr             go to state 103
    literal              go to state 104


state 140

  105 expr: expr TOK_BITAND . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 184
    prt_expr             go to state 103
    literal              go to state 104


state 141

  100 expr: expr TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 185
    prt_expr             go to state 103
    literal              go to state 104


state 142

   91 expr: expr TOK_BITXOR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 186
    prt_expr             go to state 103
    literal              go to state 104


state 143

   92 expr: expr TOK_SHL . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 187
    prt_expr             go to state 103
    literal              go to state 104


state 144

   97 expr: expr TOK_SHR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 188
    prt_expr             go to state 103
    literal              go to state 104


state 145

   98 expr: expr TOK_GT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 189
    prt_expr             go to state 103
    literal              go to state 104


state 146

   94 expr: expr TOK_LT . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 190
    prt_expr             go to state 103
    literal              go to state 104


state 147

   96 expr: expr TOK_GE . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 191
    prt_expr             go to state 103
    literal              go to state 104


state 148

   93 expr: expr TOK_LE . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 192
    prt_expr             go to state 103
    literal              go to state 104


state 149

   95 expr: expr TOK_EQ . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 193
    prt_expr             go to state 103
    literal              go to state 104


state 150

  102 expr: expr TOK_NE . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 194
    prt_expr             go to state 103
    literal              go to state 104


state 151

  106 expr: expr TOK_AND . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 195
    prt_expr             go to state 103
    literal              go to state 104


state 152

   99 expr: expr TOK_OR . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 196
    prt_expr             go to state 103
    literal              go to state 104


state 153

   32 variable_decl: TOK_IDENT . error TOK_SEMICOLON
   68 ref_expr: TOK_IDENT .
   69 function_invocation: TOK_IDENT . funcinvolistpp
  122 type: TOK_IDENT .

    error       shift, and go to state 42
    TOK_LPAREN  shift, and go to state 123

    error       [reduce using rule 122 (type)]
    TOK_ASSIGN  reduce using rule 68 (ref_expr)
    TOK_IDENT   reduce using rule 122 (type)

    funcinvolistpp  go to state 124


state 154

   80 fun_rest: variable_decl . stmt_plus
   81         | variable_decl . error

    error          shift, and go to state 197
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 116
    ret_stmt             go to state 76
    stmt_plus            go to state 198
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 155

   59 stmt_plus: stmt_plus . stmt
   60          | stmt_plus . error stmt
   79 fun_rest: stmt_plus .

    error          shift, and go to state 165
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    TOK_RBRACE  reduce using rule 79 (fun_rest)

    stmt                 go to state 167
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 156

   78 funcbody: TOK_LBRACE fun_rest . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 199


state 157

   28 variable_decl: type . vlist TOK_SEMICOLON
   29              | type . vlist error TOK_SEMICOLON
   30              | type . vlist TOK_COMMA error
   31              | type . error TOK_SEMICOLON

    error      shift, and go to state 57
    TOK_IDENT  shift, and go to state 161

    vlist  go to state 59
    vname  go to state 60


state 158

   36 vname: TOK_IDENT TOK_ASSIGN expr .
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152

    $default  reduce using rule 36 (vname)


state 159

   29 variable_decl: type vlist error TOK_SEMICOLON .

    $default  reduce using rule 29 (variable_decl)


state 160

   30 variable_decl: type vlist TOK_COMMA error .

    $default  reduce using rule 30 (variable_decl)


state 161

   35 vname: TOK_IDENT .
   36      | TOK_IDENT . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 109

    $default  reduce using rule 35 (vname)


state 162

   34 vlist: vlist TOK_COMMA vname .

    $default  reduce using rule 34 (vlist)


state 163

   47 evenparamlist: evenparamlist TOK_COMMA TOK_IDENT .

    $default  reduce using rule 47 (evenparamlist)


state 164

   56 stmt: TOK_LBRACE error TOK_RBRACE .

    $default  reduce using rule 56 (stmt)


state 165

   60 stmt_plus: stmt_plus error . stmt

    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 200
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 166

   51 stmt: TOK_LBRACE stmt_plus TOK_RBRACE .

    $default  reduce using rule 51 (stmt)


state 167

   59 stmt_plus: stmt_plus stmt .

    $default  reduce using rule 59 (stmt_plus)


state 168

   63 if_then_else_stmt: TOK_IF error stmt .

    $default  reduce using rule 63 (if_then_else_stmt)


state 169

   64 if_then_else_stmt: TOK_IF expr error . stmt

    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 201
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 170

   61 if_then_else_stmt: TOK_IF expr stmt . TOK_ELSE stmt
   62                  | TOK_IF expr stmt .
   65                  | TOK_IF expr stmt . TOK_ELSE error TOK_SEMICOLON

    TOK_ELSE  shift, and go to state 202

    TOK_ELSE  [reduce using rule 62 (if_then_else_stmt)]
    $default  reduce using rule 62 (if_then_else_stmt)


state 171

   54 stmt: TOK_WHILE expr stmt .

    $default  reduce using rule 54 (stmt)


state 172

   70 funcinvolistpp: TOK_LPAREN expr_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 203


state 173

   72 expr_list: expr_plus .
   74 expr_plus: expr_plus . TOK_COMMA expr

    TOK_COMMA  shift, and go to state 204

    $default  reduce using rule 72 (expr_list)


state 174

   73 expr_plus: expr .
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152

    $default  reduce using rule 73 (expr_plus)


state 175

   67 asg_stmt: ref_expr TOK_ASSIGN error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 205


state 176

   66 asg_stmt: ref_expr TOK_ASSIGN expr .
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152

    $default  reduce using rule 66 (asg_stmt)


state 177

  118 formal_param_plus: formal_param_plus TOK_COMMA formal_param .

    $default  reduce using rule 118 (formal_param_plus)


state 178

   89 expr: TOK_LPAREN expr TOK_RPAREN .

    $default  reduce using rule 89 (expr)


state 179

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr
  108     | expr TOK_PLUS expr .

    TOK_MULT  shift, and go to state 137
    TOK_DIV   shift, and go to state 138
    TOK_MOD   shift, and go to state 139

    $default  reduce using rule 108 (expr)


state 180

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  101     | expr TOK_MINUS expr .
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 137
    TOK_DIV   shift, and go to state 138
    TOK_MOD   shift, and go to state 139

    $default  reduce using rule 101 (expr)


state 181

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  104     | expr TOK_MULT expr .
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    $default  reduce using rule 104 (expr)


state 182

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  103     | expr TOK_DIV expr .
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    $default  reduce using rule 103 (expr)


state 183

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  107     | expr TOK_MOD expr .
  108     | expr . TOK_PLUS expr

    $default  reduce using rule 107 (expr)


state 184

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  105     | expr TOK_BITAND expr .
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 135
    TOK_MINUS  shift, and go to state 136
    TOK_MULT   shift, and go to state 137
    TOK_DIV    shift, and go to state 138
    TOK_MOD    shift, and go to state 139
    TOK_SHL    shift, and go to state 143
    TOK_SHR    shift, and go to state 144

    $default  reduce using rule 105 (expr)


state 185

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  100     | expr TOK_BITOR expr .
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    $default  reduce using rule 100 (expr)


state 186

   91 expr: expr . TOK_BITXOR expr
   91     | expr TOK_BITXOR expr .
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    $default  reduce using rule 91 (expr)


state 187

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   92     | expr TOK_SHL expr .
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 135
    TOK_MINUS  shift, and go to state 136
    TOK_MULT   shift, and go to state 137
    TOK_DIV    shift, and go to state 138
    TOK_MOD    shift, and go to state 139

    $default  reduce using rule 92 (expr)


state 188

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   97     | expr TOK_SHR expr .
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 135
    TOK_MINUS  shift, and go to state 136
    TOK_MULT   shift, and go to state 137
    TOK_DIV    shift, and go to state 138
    TOK_MOD    shift, and go to state 139

    $default  reduce using rule 97 (expr)


state 189

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   98     | expr TOK_GT expr .
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 98 (expr)


state 190

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   94     | expr TOK_LT expr .
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 94 (expr)


state 191

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   96     | expr TOK_GE expr .
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 96 (expr)


state 192

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   93     | expr TOK_LE expr .
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 93 (expr)


state 193

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   95     | expr TOK_EQ expr .
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 95 (expr)


state 194

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  102     | expr TOK_NE expr .
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 102 (expr)


state 195

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  106     | expr TOK_AND expr .
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150

    $default  reduce using rule 106 (expr)


state 196

   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
   99     | expr TOK_OR expr .
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151

    $default  reduce using rule 99 (expr)


state 197

   81 fun_rest: variable_decl error .

    $default  reduce using rule 81 (fun_rest)


state 198

   59 stmt_plus: stmt_plus . stmt
   60          | stmt_plus . error stmt
   80 fun_rest: variable_decl stmt_plus .

    error          shift, and go to state 165
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    TOK_RBRACE  reduce using rule 80 (fun_rest)

    stmt                 go to state 167
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 199

   78 funcbody: TOK_LBRACE fun_rest TOK_RBRACE .

    $default  reduce using rule 78 (funcbody)


state 200

   60 stmt_plus: stmt_plus error stmt .

    $default  reduce using rule 60 (stmt_plus)


state 201

   64 if_then_else_stmt: TOK_IF expr error stmt .

    $default  reduce using rule 64 (if_then_else_stmt)


state 202

   61 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE . stmt
   65                  | TOK_IF expr stmt TOK_ELSE . error TOK_SEMICOLON

    error          shift, and go to state 206
    TOK_SEMICOLON  shift, and go to state 67
    TOK_LBRACE     shift, and go to state 68
    TOK_IF         shift, and go to state 69
    TOK_RETURN     shift, and go to state 70
    TOK_PRINT      shift, and go to state 71
    TOK_WHILE      shift, and go to state 72
    TOK_IDENT      shift, and go to state 73

    stmt                 go to state 207
    ret_stmt             go to state 76
    if_then_else_stmt    go to state 77
    asg_stmt             go to state 78
    ref_expr             go to state 79
    function_invocation  go to state 80
    prt_expr             go to state 81


state 203

   70 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN .

    $default  reduce using rule 70 (funcinvolistpp)


state 204

   74 expr_plus: expr_plus TOK_COMMA . expr

    TOK_MINUS      shift, and go to state 90
    TOK_BITNOT     shift, and go to state 91
    TOK_NOT        shift, and go to state 92
    TOK_LPAREN     shift, and go to state 93
    TOK_PRINT      shift, and go to state 71
    TOK_UINTNUM    shift, and go to state 94
    TOK_DOUBLENUM  shift, and go to state 95
    TOK_STRCONST   shift, and go to state 96
    TOK_TRUE       shift, and go to state 97
    TOK_FALSE      shift, and go to state 98
    TOK_IDENT      shift, and go to state 73

    asg_stmt             go to state 99
    ref_expr             go to state 100
    function_invocation  go to state 101
    expr                 go to state 208
    prt_expr             go to state 103
    literal              go to state 104


state 205

   67 asg_stmt: ref_expr TOK_ASSIGN error TOK_SEMICOLON .

    $default  reduce using rule 67 (asg_stmt)


state 206

   65 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 209


state 207

   61 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt .

    $default  reduce using rule 61 (if_then_else_stmt)


state 208

   74 expr_plus: expr_plus TOK_COMMA expr .
   91 expr: expr . TOK_BITXOR expr
   92     | expr . TOK_SHL expr
   93     | expr . TOK_LE expr
   94     | expr . TOK_LT expr
   95     | expr . TOK_EQ expr
   96     | expr . TOK_GE expr
   97     | expr . TOK_SHR expr
   98     | expr . TOK_GT expr
   99     | expr . TOK_OR expr
  100     | expr . TOK_BITOR expr
  101     | expr . TOK_MINUS expr
  102     | expr . TOK_NE expr
  103     | expr . TOK_DIV expr
  104     | expr . TOK_MULT expr
  105     | expr . TOK_BITAND expr
  106     | expr . TOK_AND expr
  107     | expr . TOK_MOD expr
  108     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 135
    TOK_MINUS   shift, and go to state 136
    TOK_MULT    shift, and go to state 137
    TOK_DIV     shift, and go to state 138
    TOK_MOD     shift, and go to state 139
    TOK_BITAND  shift, and go to state 140
    TOK_BITOR   shift, and go to state 141
    TOK_BITXOR  shift, and go to state 142
    TOK_SHL     shift, and go to state 143
    TOK_SHR     shift, and go to state 144
    TOK_GT      shift, and go to state 145
    TOK_LT      shift, and go to state 146
    TOK_GE      shift, and go to state 147
    TOK_LE      shift, and go to state 148
    TOK_EQ      shift, and go to state 149
    TOK_NE      shift, and go to state 150
    TOK_AND     shift, and go to state 151
    TOK_OR      shift, and go to state 152

    $default  reduce using rule 74 (expr_plus)


state 209

   65 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE error TOK_SEMICOLON .

    $default  reduce using rule 65 (if_then_else_stmt)
