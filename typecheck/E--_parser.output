Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_UMINUS
   TOK_PRINT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


State 63 conflicts: 1 shift/reduce
State 141 conflicts: 1 shift/reduce


Grammar

    0 $accept: specification $end

    1 specification: ifc_decl_star
    2              | ifc_decl_star rule_list

    3 ifc_decl_star: /* empty */
    4              | ifc_decl_star ifc_decl
    5              | ifc_decl_star error TOK_SEMICOLON

    6 rule_list: rule
    7          | rule_list rule

    8 rule: event_pattern TOK_ARROW rule_body1
    9     | event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON

   10 ifc_decl: TOK_SEMICOLON
   11         | function_decl
   12         | variable_decl
   13         | event_decl
   14         | class_decl

   15 class_decl: TOK_CLASS TOK_IDENT

   16 event_pattern: primitive_pat
   17              | TOK_LPAREN event_pattern TOK_RPAREN
   18              | event_pattern TOK_COLON event_pattern
   19              | event_pattern TOK_PAT_OR event_pattern
   20              | event_pattern TOK_PAT_STAR
   21              | TOK_NOT event_pattern

   22 rule_body1: stmt

   23 function_decl: function_header formalparamlistpp funcbody

   24 variable_decl: type vlist TOK_SEMICOLON

   25 vlist: vname
   26      | vlist TOK_COMMA vname

   27 vname: TOK_IDENT
   28      | TOK_IDENT TOK_ASSIGN expr

   29 event_decl: event_decl_hdr formalparamlistpp

   30 event_decl_hdr: TOK_EVENT TOK_IDENT

   31 primitive_pat: event
   32              | event TOK_BITOR expr

   33 event: TOK_ANY
   34      | TOK_IDENT evenparamlistpp

   35 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN

   36 evenparamlist: /* empty */
   37              | TOK_IDENT
   38              | evenparamlist TOK_COMMA TOK_IDENT

   39 stmt: TOK_SEMICOLON
   40     | function_invocation
   41     | asg_stmt
   42     | TOK_LBRACE stmt_plus TOK_RBRACE
   43     | if_then_else_stmt
   44     | ret_stmt

   45 ret_stmt: TOK_RETURN expr

   46 stmt_plus: stmt
   47          | stmt_plus stmt

   48 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt
   49                  | TOK_IF expr stmt

   50 asg_stmt: ref_expr TOK_ASSIGN expr

   51 ref_expr: TOK_IDENT

   52 function_invocation: TOK_IDENT funcinvolistpp

   53 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN

   54 expr_list: /* empty */
   55          | expr_plus

   56 expr_plus: expr
   57          | expr_plus TOK_COMMA expr

   58 function_header: type TOK_IDENT

   59 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN

   60 funcbody: /* empty */
   61         | TOK_LBRACE fun_rest TOK_RBRACE

   62 fun_rest: stmt_plus
   63         | variable_decl stmt_plus

   64 expr: literal
   65     | ref_expr
   66     | asg_stmt
   67     | function_invocation
   68     | TOK_BITNOT expr
   69     | TOK_MINUS expr
   70     | TOK_LPAREN expr TOK_RPAREN
   71     | TOK_NOT expr
   72     | expr TOK_BITXOR expr
   73     | expr TOK_SHL expr
   74     | expr TOK_LE expr
   75     | expr TOK_LT expr
   76     | expr TOK_EQ expr
   77     | expr TOK_GE expr
   78     | expr TOK_SHR expr
   79     | expr TOK_GT expr
   80     | expr TOK_OR expr
   81     | expr TOK_BITOR expr
   82     | expr TOK_MINUS expr
   83     | expr TOK_NE expr
   84     | expr TOK_DIV expr
   85     | expr TOK_MULT expr
   86     | expr TOK_BITAND expr
   87     | expr TOK_AND expr
   88     | expr TOK_MOD expr
   89     | expr TOK_PLUS expr

   90 literal: TOK_UINTNUM
   91        | TOK_DOUBLENUM
   92        | TOK_STRCONST
   93        | TOK_TRUE
   94        | TOK_FALSE

   95 formal_param_list: /* empty */
   96                  | formal_param_plus

   97 formal_param_plus: formal_param
   98                  | formal_param_plus TOK_COMMA formal_param

   99 formal_param: type TOK_IDENT

  100 type: baseType
  101     | TOK_UNSIGNED baseType
  102     | TOK_IDENT

  103 baseType: TOK_INT
  104         | TOK_BOOL
  105         | TOK_DOUBLE
  106         | TOK_VOID
  107         | TOK_STRING
  108         | TOK_BYTE


Terminals, with rules where they appear

$end (0) 0
error (256) 5
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 20
TOK_PAT_OR (260) 19
TOK_PAT_NOT (261)
TOK_PLUS (262) 89
TOK_MINUS (263) 69 82
TOK_UMINUS (264)
TOK_MULT (265) 85
TOK_DIV (266) 84
TOK_MOD (267) 88
TOK_BITAND (268) 86
TOK_BITOR (269) 32 81
TOK_BITNOT (270) 68
TOK_BITXOR (271) 72
TOK_SHL (272) 73
TOK_SHR (273) 78
TOK_GT (274) 79
TOK_LT (275) 75
TOK_GE (276) 77
TOK_LE (277) 74
TOK_EQ (278) 76
TOK_NE (279) 83
TOK_AND (280) 87
TOK_OR (281) 80
TOK_NOT (282) 21 71
TOK_COMMA (283) 26 38 57 98
TOK_ASSIGN (284) 28 50
TOK_SEMICOLON (285) 5 9 10 24 39
TOK_COLON (286) 18
TOK_ARROW (287) 8 9
TOK_LBRACE (288) 42 61
TOK_RBRACE (289) 42 61
TOK_LPAREN (290) 17 35 53 59 70
TOK_RPAREN (291) 17 35 53 59 70
TOK_IF (292) 48 49
TOK_ELSE (293) 48
TOK_CLASS (294) 15
TOK_RETURN (295) 45
TOK_EVENT (296) 30
TOK_ANY (297) 33
TOK_PRINT (298)
TOK_UINTNUM (299) 90
TOK_DOUBLENUM (300) 91
TOK_VOID (301) 106
TOK_STRING (302) 107
TOK_STRCONST (303) 92
TOK_INT (304) 103
TOK_UNSIGNED (305) 101
TOK_BOOL (306) 104
TOK_BYTE (307) 108
TOK_DOUBLE (308) 105
TOK_SHORT (309)
TOK_TRUE (310) 93
TOK_FALSE (311) 94
TOK_IDENT (312) 15 27 28 30 34 37 38 51 52 58 99 102
TOK_DOUBLE_COLON (313)
TOK_LBRACK (314)
TOK_DOT (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
specification (62)
    on left: 1 2, on right: 0
ifc_decl_star (63)
    on left: 3 4 5, on right: 1 2 4 5
rule_list (64)
    on left: 6 7, on right: 2 7
rule (65)
    on left: 8 9, on right: 6 7
ifc_decl (66)
    on left: 10 11 12 13 14, on right: 4
class_decl (67)
    on left: 15, on right: 14
event_pattern (68)
    on left: 16 17 18 19 20 21, on right: 8 9 17 18 19 20 21
rule_body1 (69)
    on left: 22, on right: 8 9
function_decl (70)
    on left: 23, on right: 11
variable_decl (71)
    on left: 24, on right: 12 63
vlist (72)
    on left: 25 26, on right: 24 26
vname (73)
    on left: 27 28, on right: 25 26
event_decl (74)
    on left: 29, on right: 13
event_decl_hdr (75)
    on left: 30, on right: 29
primitive_pat (76)
    on left: 31 32, on right: 16
event (77)
    on left: 33 34, on right: 31 32
evenparamlistpp (78)
    on left: 35, on right: 34
evenparamlist (79)
    on left: 36 37 38, on right: 35 38
stmt (80)
    on left: 39 40 41 42 43 44, on right: 22 46 47 48 49
ret_stmt (81)
    on left: 45, on right: 44
stmt_plus (82)
    on left: 46 47, on right: 42 47 62 63
if_then_else_stmt (83)
    on left: 48 49, on right: 43
asg_stmt (84)
    on left: 50, on right: 41 66
ref_expr (85)
    on left: 51, on right: 50 65
function_invocation (86)
    on left: 52, on right: 40 67
funcinvolistpp (87)
    on left: 53, on right: 52
expr_list (88)
    on left: 54 55, on right: 53
expr_plus (89)
    on left: 56 57, on right: 55 57
function_header (90)
    on left: 58, on right: 23
formalparamlistpp (91)
    on left: 59, on right: 23 29
funcbody (92)
    on left: 60 61, on right: 23
fun_rest (93)
    on left: 62 63, on right: 61
expr (94)
    on left: 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81
    82 83 84 85 86 87 88 89, on right: 28 32 45 48 49 50 56 57 68 69
    70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
literal (95)
    on left: 90 91 92 93 94, on right: 64
formal_param_list (96)
    on left: 95 96, on right: 59
formal_param_plus (97)
    on left: 97 98, on right: 96 98
formal_param (98)
    on left: 99, on right: 97 98
type (99)
    on left: 100 101 102, on right: 24 58 99
baseType (100)
    on left: 103 104 105 106 107 108, on right: 100 101


state 0

    0 $accept: . specification $end

    $default  reduce using rule 3 (ifc_decl_star)

    specification  go to state 1
    ifc_decl_star  go to state 2


state 1

    0 $accept: specification . $end

    $end  shift, and go to state 3


state 2

    1 specification: ifc_decl_star .
    2              | ifc_decl_star . rule_list
    4 ifc_decl_star: ifc_decl_star . ifc_decl
    5              | ifc_decl_star . error TOK_SEMICOLON

    error          shift, and go to state 4
    TOK_NOT        shift, and go to state 5
    TOK_SEMICOLON  shift, and go to state 6
    TOK_LPAREN     shift, and go to state 7
    TOK_CLASS      shift, and go to state 8
    TOK_EVENT      shift, and go to state 9
    TOK_ANY        shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 18

    $end  reduce using rule 1 (specification)

    rule_list        go to state 19
    rule             go to state 20
    ifc_decl         go to state 21
    class_decl       go to state 22
    event_pattern    go to state 23
    function_decl    go to state 24
    variable_decl    go to state 25
    event_decl       go to state 26
    event_decl_hdr   go to state 27
    primitive_pat    go to state 28
    event            go to state 29
    function_header  go to state 30
    type             go to state 31
    baseType         go to state 32


state 3

    0 $accept: specification $end .

    $default  accept


state 4

    5 ifc_decl_star: ifc_decl_star error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 33


state 5

   21 event_pattern: TOK_NOT . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 35
    primitive_pat  go to state 28
    event          go to state 29


state 6

   10 ifc_decl: TOK_SEMICOLON .

    $default  reduce using rule 10 (ifc_decl)


state 7

   17 event_pattern: TOK_LPAREN . event_pattern TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 36
    primitive_pat  go to state 28
    event          go to state 29


state 8

   15 class_decl: TOK_CLASS . TOK_IDENT

    TOK_IDENT  shift, and go to state 37


state 9

   30 event_decl_hdr: TOK_EVENT . TOK_IDENT

    TOK_IDENT  shift, and go to state 38


state 10

   33 event: TOK_ANY .

    $default  reduce using rule 33 (event)


state 11

  106 baseType: TOK_VOID .

    $default  reduce using rule 106 (baseType)


state 12

  107 baseType: TOK_STRING .

    $default  reduce using rule 107 (baseType)


state 13

  103 baseType: TOK_INT .

    $default  reduce using rule 103 (baseType)


state 14

  101 type: TOK_UNSIGNED . baseType

    TOK_VOID    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_INT     shift, and go to state 13
    TOK_BOOL    shift, and go to state 15
    TOK_BYTE    shift, and go to state 16
    TOK_DOUBLE  shift, and go to state 17

    baseType  go to state 39


state 15

  104 baseType: TOK_BOOL .

    $default  reduce using rule 104 (baseType)


state 16

  108 baseType: TOK_BYTE .

    $default  reduce using rule 108 (baseType)


state 17

  105 baseType: TOK_DOUBLE .

    $default  reduce using rule 105 (baseType)


state 18

   34 event: TOK_IDENT . evenparamlistpp
  102 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 40

    $default  reduce using rule 102 (type)

    evenparamlistpp  go to state 41


state 19

    2 specification: ifc_decl_star rule_list .
    7 rule_list: rule_list . rule

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    $default  reduce using rule 2 (specification)

    rule           go to state 42
    event_pattern  go to state 23
    primitive_pat  go to state 28
    event          go to state 29


state 20

    6 rule_list: rule .

    $default  reduce using rule 6 (rule_list)


state 21

    4 ifc_decl_star: ifc_decl_star ifc_decl .

    $default  reduce using rule 4 (ifc_decl_star)


state 22

   14 ifc_decl: class_decl .

    $default  reduce using rule 14 (ifc_decl)


state 23

    8 rule: event_pattern . TOK_ARROW rule_body1
    9     | event_pattern . TOK_ARROW rule_body1 TOK_SEMICOLON
   18 event_pattern: event_pattern . TOK_COLON event_pattern
   19              | event_pattern . TOK_PAT_OR event_pattern
   20              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 43
    TOK_PAT_OR    shift, and go to state 44
    TOK_COLON     shift, and go to state 45
    TOK_ARROW     shift, and go to state 46


state 24

   11 ifc_decl: function_decl .

    $default  reduce using rule 11 (ifc_decl)


state 25

   12 ifc_decl: variable_decl .

    $default  reduce using rule 12 (ifc_decl)


state 26

   13 ifc_decl: event_decl .

    $default  reduce using rule 13 (ifc_decl)


state 27

   29 event_decl: event_decl_hdr . formalparamlistpp

    TOK_LPAREN  shift, and go to state 47

    formalparamlistpp  go to state 48


state 28

   16 event_pattern: primitive_pat .

    $default  reduce using rule 16 (event_pattern)


state 29

   31 primitive_pat: event .
   32              | event . TOK_BITOR expr

    TOK_BITOR  shift, and go to state 49

    $default  reduce using rule 31 (primitive_pat)


state 30

   23 function_decl: function_header . formalparamlistpp funcbody

    TOK_LPAREN  shift, and go to state 47

    formalparamlistpp  go to state 50


state 31

   24 variable_decl: type . vlist TOK_SEMICOLON
   58 function_header: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 51

    vlist  go to state 52
    vname  go to state 53


state 32

  100 type: baseType .

    $default  reduce using rule 100 (type)


state 33

    5 ifc_decl_star: ifc_decl_star error TOK_SEMICOLON .

    $default  reduce using rule 5 (ifc_decl_star)


state 34

   34 event: TOK_IDENT . evenparamlistpp

    TOK_LPAREN  shift, and go to state 40

    evenparamlistpp  go to state 41


state 35

   18 event_pattern: event_pattern . TOK_COLON event_pattern
   19              | event_pattern . TOK_PAT_OR event_pattern
   20              | event_pattern . TOK_PAT_STAR
   21              | TOK_NOT event_pattern .

    $default  reduce using rule 21 (event_pattern)


state 36

   17 event_pattern: TOK_LPAREN event_pattern . TOK_RPAREN
   18              | event_pattern . TOK_COLON event_pattern
   19              | event_pattern . TOK_PAT_OR event_pattern
   20              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 43
    TOK_PAT_OR    shift, and go to state 44
    TOK_COLON     shift, and go to state 45
    TOK_RPAREN    shift, and go to state 54


state 37

   15 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 15 (class_decl)


state 38

   30 event_decl_hdr: TOK_EVENT TOK_IDENT .

    $default  reduce using rule 30 (event_decl_hdr)


state 39

  101 type: TOK_UNSIGNED baseType .

    $default  reduce using rule 101 (type)


state 40

   35 evenparamlistpp: TOK_LPAREN . evenparamlist TOK_RPAREN

    TOK_IDENT  shift, and go to state 55

    $default  reduce using rule 36 (evenparamlist)

    evenparamlist  go to state 56


state 41

   34 event: TOK_IDENT evenparamlistpp .

    $default  reduce using rule 34 (event)


state 42

    7 rule_list: rule_list rule .

    $default  reduce using rule 7 (rule_list)


state 43

   20 event_pattern: event_pattern TOK_PAT_STAR .

    $default  reduce using rule 20 (event_pattern)


state 44

   19 event_pattern: event_pattern TOK_PAT_OR . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 57
    primitive_pat  go to state 28
    event          go to state 29


state 45

   18 event_pattern: event_pattern TOK_COLON . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 34

    event_pattern  go to state 58
    primitive_pat  go to state 28
    event          go to state 29


state 46

    8 rule: event_pattern TOK_ARROW . rule_body1
    9     | event_pattern TOK_ARROW . rule_body1 TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    rule_body1           go to state 64
    stmt                 go to state 65
    ret_stmt             go to state 66
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 47

   59 formalparamlistpp: TOK_LPAREN . formal_param_list TOK_RPAREN

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 71

    $default  reduce using rule 95 (formal_param_list)

    formal_param_list  go to state 72
    formal_param_plus  go to state 73
    formal_param       go to state 74
    type               go to state 75
    baseType           go to state 32


state 48

   29 event_decl: event_decl_hdr formalparamlistpp .

    $default  reduce using rule 29 (event_decl)


state 49

   32 primitive_pat: event TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 88
    literal              go to state 89


state 50

   23 function_decl: function_header formalparamlistpp . funcbody

    TOK_LBRACE  shift, and go to state 90

    $default  reduce using rule 60 (funcbody)

    funcbody  go to state 91


state 51

   27 vname: TOK_IDENT .
   28      | TOK_IDENT . TOK_ASSIGN expr
   58 function_header: type TOK_IDENT .

    TOK_ASSIGN  shift, and go to state 92

    TOK_LPAREN  reduce using rule 58 (function_header)
    $default    reduce using rule 27 (vname)


state 52

   24 variable_decl: type vlist . TOK_SEMICOLON
   26 vlist: vlist . TOK_COMMA vname

    TOK_COMMA      shift, and go to state 93
    TOK_SEMICOLON  shift, and go to state 94


state 53

   25 vlist: vname .

    $default  reduce using rule 25 (vlist)


state 54

   17 event_pattern: TOK_LPAREN event_pattern TOK_RPAREN .

    $default  reduce using rule 17 (event_pattern)


state 55

   37 evenparamlist: TOK_IDENT .

    $default  reduce using rule 37 (evenparamlist)


state 56

   35 evenparamlistpp: TOK_LPAREN evenparamlist . TOK_RPAREN
   38 evenparamlist: evenparamlist . TOK_COMMA TOK_IDENT

    TOK_COMMA   shift, and go to state 95
    TOK_RPAREN  shift, and go to state 96


state 57

   18 event_pattern: event_pattern . TOK_COLON event_pattern
   19              | event_pattern . TOK_PAT_OR event_pattern
   19              | event_pattern TOK_PAT_OR event_pattern .
   20              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 43
    TOK_COLON     shift, and go to state 45

    $default  reduce using rule 19 (event_pattern)


state 58

   18 event_pattern: event_pattern . TOK_COLON event_pattern
   18              | event_pattern TOK_COLON event_pattern .
   19              | event_pattern . TOK_PAT_OR event_pattern
   20              | event_pattern . TOK_PAT_STAR

    TOK_PAT_STAR  shift, and go to state 43

    $default  reduce using rule 18 (event_pattern)


state 59

   39 stmt: TOK_SEMICOLON .

    $default  reduce using rule 39 (stmt)


state 60

   42 stmt: TOK_LBRACE . stmt_plus TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    stmt                 go to state 97
    ret_stmt             go to state 66
    stmt_plus            go to state 98
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 61

   48 if_then_else_stmt: TOK_IF . expr stmt TOK_ELSE stmt
   49                  | TOK_IF . expr stmt

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 99
    literal              go to state 89


state 62

   45 ret_stmt: TOK_RETURN . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 100
    literal              go to state 89


state 63

   51 ref_expr: TOK_IDENT .
   52 function_invocation: TOK_IDENT . funcinvolistpp

    TOK_LPAREN  shift, and go to state 101

    TOK_LPAREN  [reduce using rule 51 (ref_expr)]
    $default    reduce using rule 51 (ref_expr)

    funcinvolistpp  go to state 102


state 64

    8 rule: event_pattern TOK_ARROW rule_body1 .
    9     | event_pattern TOK_ARROW rule_body1 . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 103

    $default  reduce using rule 8 (rule)


state 65

   22 rule_body1: stmt .

    $default  reduce using rule 22 (rule_body1)


state 66

   44 stmt: ret_stmt .

    $default  reduce using rule 44 (stmt)


state 67

   43 stmt: if_then_else_stmt .

    $default  reduce using rule 43 (stmt)


state 68

   41 stmt: asg_stmt .

    $default  reduce using rule 41 (stmt)


state 69

   50 asg_stmt: ref_expr . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 104


state 70

   40 stmt: function_invocation .

    $default  reduce using rule 40 (stmt)


state 71

  102 type: TOK_IDENT .

    $default  reduce using rule 102 (type)


state 72

   59 formalparamlistpp: TOK_LPAREN formal_param_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 105


state 73

   96 formal_param_list: formal_param_plus .
   98 formal_param_plus: formal_param_plus . TOK_COMMA formal_param

    TOK_COMMA  shift, and go to state 106

    $default  reduce using rule 96 (formal_param_list)


state 74

   97 formal_param_plus: formal_param .

    $default  reduce using rule 97 (formal_param_plus)


state 75

   99 formal_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 107


state 76

   69 expr: TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 108
    literal              go to state 89


state 77

   68 expr: TOK_BITNOT . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 109
    literal              go to state 89


state 78

   71 expr: TOK_NOT . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 110
    literal              go to state 89


state 79

   70 expr: TOK_LPAREN . expr TOK_RPAREN

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 111
    literal              go to state 89


state 80

   90 literal: TOK_UINTNUM .

    $default  reduce using rule 90 (literal)


state 81

   91 literal: TOK_DOUBLENUM .

    $default  reduce using rule 91 (literal)


state 82

   92 literal: TOK_STRCONST .

    $default  reduce using rule 92 (literal)


state 83

   93 literal: TOK_TRUE .

    $default  reduce using rule 93 (literal)


state 84

   94 literal: TOK_FALSE .

    $default  reduce using rule 94 (literal)


state 85

   66 expr: asg_stmt .

    $default  reduce using rule 66 (expr)


state 86

   50 asg_stmt: ref_expr . TOK_ASSIGN expr
   65 expr: ref_expr .

    TOK_ASSIGN  shift, and go to state 104

    $default  reduce using rule 65 (expr)


state 87

   67 expr: function_invocation .

    $default  reduce using rule 67 (expr)


state 88

   32 primitive_pat: event TOK_BITOR expr .
   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 32 (primitive_pat)


state 89

   64 expr: literal .

    $default  reduce using rule 64 (expr)


state 90

   61 funcbody: TOK_LBRACE . fun_rest TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 130

    variable_decl        go to state 131
    stmt                 go to state 97
    ret_stmt             go to state 66
    stmt_plus            go to state 132
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70
    fun_rest             go to state 133
    type                 go to state 134
    baseType             go to state 32


state 91

   23 function_decl: function_header formalparamlistpp funcbody .

    $default  reduce using rule 23 (function_decl)


state 92

   28 vname: TOK_IDENT TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 135
    literal              go to state 89


state 93

   26 vlist: vlist TOK_COMMA . vname

    TOK_IDENT  shift, and go to state 136

    vname  go to state 137


state 94

   24 variable_decl: type vlist TOK_SEMICOLON .

    $default  reduce using rule 24 (variable_decl)


state 95

   38 evenparamlist: evenparamlist TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 138


state 96

   35 evenparamlistpp: TOK_LPAREN evenparamlist TOK_RPAREN .

    $default  reduce using rule 35 (evenparamlistpp)


state 97

   46 stmt_plus: stmt .

    $default  reduce using rule 46 (stmt_plus)


state 98

   42 stmt: TOK_LBRACE stmt_plus . TOK_RBRACE
   47 stmt_plus: stmt_plus . stmt

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_RBRACE     shift, and go to state 139
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    stmt                 go to state 140
    ret_stmt             go to state 66
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 99

   48 if_then_else_stmt: TOK_IF expr . stmt TOK_ELSE stmt
   49                  | TOK_IF expr . stmt
   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS       shift, and go to state 112
    TOK_MINUS      shift, and go to state 113
    TOK_MULT       shift, and go to state 114
    TOK_DIV        shift, and go to state 115
    TOK_MOD        shift, and go to state 116
    TOK_BITAND     shift, and go to state 117
    TOK_BITOR      shift, and go to state 118
    TOK_BITXOR     shift, and go to state 119
    TOK_SHL        shift, and go to state 120
    TOK_SHR        shift, and go to state 121
    TOK_GT         shift, and go to state 122
    TOK_LT         shift, and go to state 123
    TOK_GE         shift, and go to state 124
    TOK_LE         shift, and go to state 125
    TOK_EQ         shift, and go to state 126
    TOK_NE         shift, and go to state 127
    TOK_AND        shift, and go to state 128
    TOK_OR         shift, and go to state 129
    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    stmt                 go to state 141
    ret_stmt             go to state 66
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 100

   45 ret_stmt: TOK_RETURN expr .
   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 45 (ret_stmt)


state 101

   53 funcinvolistpp: TOK_LPAREN . expr_list TOK_RPAREN

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    $default  reduce using rule 54 (expr_list)

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr_list            go to state 142
    expr_plus            go to state 143
    expr                 go to state 144
    literal              go to state 89


state 102

   52 function_invocation: TOK_IDENT funcinvolistpp .

    $default  reduce using rule 52 (function_invocation)


state 103

    9 rule: event_pattern TOK_ARROW rule_body1 TOK_SEMICOLON .

    $default  reduce using rule 9 (rule)


state 104

   50 asg_stmt: ref_expr TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 145
    literal              go to state 89


state 105

   59 formalparamlistpp: TOK_LPAREN formal_param_list TOK_RPAREN .

    $default  reduce using rule 59 (formalparamlistpp)


state 106

   98 formal_param_plus: formal_param_plus TOK_COMMA . formal_param

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 71

    formal_param  go to state 146
    type          go to state 75
    baseType      go to state 32


state 107

   99 formal_param: type TOK_IDENT .

    $default  reduce using rule 99 (formal_param)


state 108

   69 expr: TOK_MINUS expr .
   72     | expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 114
    TOK_DIV   shift, and go to state 115
    TOK_MOD   shift, and go to state 116

    $default  reduce using rule 69 (expr)


state 109

   68 expr: TOK_BITNOT expr .
   72     | expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116
    TOK_SHL    shift, and go to state 120
    TOK_SHR    shift, and go to state 121

    $default  reduce using rule 68 (expr)


state 110

   71 expr: TOK_NOT expr .
   72     | expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127

    $default  reduce using rule 71 (expr)


state 111

   70 expr: TOK_LPAREN expr . TOK_RPAREN
   72     | expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129
    TOK_RPAREN  shift, and go to state 147


state 112

   89 expr: expr TOK_PLUS . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 148
    literal              go to state 89


state 113

   82 expr: expr TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 149
    literal              go to state 89


state 114

   85 expr: expr TOK_MULT . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 150
    literal              go to state 89


state 115

   84 expr: expr TOK_DIV . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 151
    literal              go to state 89


state 116

   88 expr: expr TOK_MOD . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 152
    literal              go to state 89


state 117

   86 expr: expr TOK_BITAND . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 153
    literal              go to state 89


state 118

   81 expr: expr TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 154
    literal              go to state 89


state 119

   72 expr: expr TOK_BITXOR . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 155
    literal              go to state 89


state 120

   73 expr: expr TOK_SHL . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 156
    literal              go to state 89


state 121

   78 expr: expr TOK_SHR . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 157
    literal              go to state 89


state 122

   79 expr: expr TOK_GT . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 158
    literal              go to state 89


state 123

   75 expr: expr TOK_LT . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 159
    literal              go to state 89


state 124

   77 expr: expr TOK_GE . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 160
    literal              go to state 89


state 125

   74 expr: expr TOK_LE . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 161
    literal              go to state 89


state 126

   76 expr: expr TOK_EQ . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 162
    literal              go to state 89


state 127

   83 expr: expr TOK_NE . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 163
    literal              go to state 89


state 128

   87 expr: expr TOK_AND . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 164
    literal              go to state 89


state 129

   80 expr: expr TOK_OR . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 165
    literal              go to state 89


state 130

   51 ref_expr: TOK_IDENT .
   52 function_invocation: TOK_IDENT . funcinvolistpp
  102 type: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 101

    TOK_IDENT  reduce using rule 102 (type)
    $default   reduce using rule 51 (ref_expr)

    funcinvolistpp  go to state 102


state 131

   63 fun_rest: variable_decl . stmt_plus

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    stmt                 go to state 97
    ret_stmt             go to state 66
    stmt_plus            go to state 166
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 132

   47 stmt_plus: stmt_plus . stmt
   62 fun_rest: stmt_plus .

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    $default  reduce using rule 62 (fun_rest)

    stmt                 go to state 140
    ret_stmt             go to state 66
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 133

   61 funcbody: TOK_LBRACE fun_rest . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 167


state 134

   24 variable_decl: type . vlist TOK_SEMICOLON

    TOK_IDENT  shift, and go to state 136

    vlist  go to state 52
    vname  go to state 53


state 135

   28 vname: TOK_IDENT TOK_ASSIGN expr .
   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 28 (vname)


state 136

   27 vname: TOK_IDENT .
   28      | TOK_IDENT . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 92

    $default  reduce using rule 27 (vname)


state 137

   26 vlist: vlist TOK_COMMA vname .

    $default  reduce using rule 26 (vlist)


state 138

   38 evenparamlist: evenparamlist TOK_COMMA TOK_IDENT .

    $default  reduce using rule 38 (evenparamlist)


state 139

   42 stmt: TOK_LBRACE stmt_plus TOK_RBRACE .

    $default  reduce using rule 42 (stmt)


state 140

   47 stmt_plus: stmt_plus stmt .

    $default  reduce using rule 47 (stmt_plus)


state 141

   48 if_then_else_stmt: TOK_IF expr stmt . TOK_ELSE stmt
   49                  | TOK_IF expr stmt .

    TOK_ELSE  shift, and go to state 168

    TOK_ELSE  [reduce using rule 49 (if_then_else_stmt)]
    $default  reduce using rule 49 (if_then_else_stmt)


state 142

   53 funcinvolistpp: TOK_LPAREN expr_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 169


state 143

   55 expr_list: expr_plus .
   57 expr_plus: expr_plus . TOK_COMMA expr

    TOK_COMMA  shift, and go to state 170

    $default  reduce using rule 55 (expr_list)


state 144

   56 expr_plus: expr .
   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 56 (expr_plus)


state 145

   50 asg_stmt: ref_expr TOK_ASSIGN expr .
   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 50 (asg_stmt)


state 146

   98 formal_param_plus: formal_param_plus TOK_COMMA formal_param .

    $default  reduce using rule 98 (formal_param_plus)


state 147

   70 expr: TOK_LPAREN expr TOK_RPAREN .

    $default  reduce using rule 70 (expr)


state 148

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr
   89     | expr TOK_PLUS expr .

    TOK_MULT  shift, and go to state 114
    TOK_DIV   shift, and go to state 115
    TOK_MOD   shift, and go to state 116

    $default  reduce using rule 89 (expr)


state 149

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   82     | expr TOK_MINUS expr .
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_MULT  shift, and go to state 114
    TOK_DIV   shift, and go to state 115
    TOK_MOD   shift, and go to state 116

    $default  reduce using rule 82 (expr)


state 150

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   85     | expr TOK_MULT expr .
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    $default  reduce using rule 85 (expr)


state 151

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   84     | expr TOK_DIV expr .
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    $default  reduce using rule 84 (expr)


state 152

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   88     | expr TOK_MOD expr .
   89     | expr . TOK_PLUS expr

    $default  reduce using rule 88 (expr)


state 153

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   86     | expr TOK_BITAND expr .
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116
    TOK_SHL    shift, and go to state 120
    TOK_SHR    shift, and go to state 121

    $default  reduce using rule 86 (expr)


state 154

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   81     | expr TOK_BITOR expr .
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    $default  reduce using rule 81 (expr)


state 155

   72 expr: expr . TOK_BITXOR expr
   72     | expr TOK_BITXOR expr .
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    $default  reduce using rule 72 (expr)


state 156

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   73     | expr TOK_SHL expr .
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116

    $default  reduce using rule 73 (expr)


state 157

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   78     | expr TOK_SHR expr .
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS   shift, and go to state 112
    TOK_MINUS  shift, and go to state 113
    TOK_MULT   shift, and go to state 114
    TOK_DIV    shift, and go to state 115
    TOK_MOD    shift, and go to state 116

    $default  reduce using rule 78 (expr)


state 158

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   79     | expr TOK_GT expr .
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 79 (expr)


state 159

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   75     | expr TOK_LT expr .
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 75 (expr)


state 160

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   77     | expr TOK_GE expr .
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 77 (expr)


state 161

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   74     | expr TOK_LE expr .
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 74 (expr)


state 162

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   76     | expr TOK_EQ expr .
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 76 (expr)


state 163

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   83     | expr TOK_NE expr .
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 83 (expr)


state 164

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   87     | expr TOK_AND expr .
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127

    $default  reduce using rule 87 (expr)


state 165

   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   80     | expr TOK_OR expr .
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128

    $default  reduce using rule 80 (expr)


state 166

   47 stmt_plus: stmt_plus . stmt
   63 fun_rest: variable_decl stmt_plus .

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    $default  reduce using rule 63 (fun_rest)

    stmt                 go to state 140
    ret_stmt             go to state 66
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 167

   61 funcbody: TOK_LBRACE fun_rest TOK_RBRACE .

    $default  reduce using rule 61 (funcbody)


state 168

   48 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE . stmt

    TOK_SEMICOLON  shift, and go to state 59
    TOK_LBRACE     shift, and go to state 60
    TOK_IF         shift, and go to state 61
    TOK_RETURN     shift, and go to state 62
    TOK_IDENT      shift, and go to state 63

    stmt                 go to state 171
    ret_stmt             go to state 66
    if_then_else_stmt    go to state 67
    asg_stmt             go to state 68
    ref_expr             go to state 69
    function_invocation  go to state 70


state 169

   53 funcinvolistpp: TOK_LPAREN expr_list TOK_RPAREN .

    $default  reduce using rule 53 (funcinvolistpp)


state 170

   57 expr_plus: expr_plus TOK_COMMA . expr

    TOK_MINUS      shift, and go to state 76
    TOK_BITNOT     shift, and go to state 77
    TOK_NOT        shift, and go to state 78
    TOK_LPAREN     shift, and go to state 79
    TOK_UINTNUM    shift, and go to state 80
    TOK_DOUBLENUM  shift, and go to state 81
    TOK_STRCONST   shift, and go to state 82
    TOK_TRUE       shift, and go to state 83
    TOK_FALSE      shift, and go to state 84
    TOK_IDENT      shift, and go to state 63

    asg_stmt             go to state 85
    ref_expr             go to state 86
    function_invocation  go to state 87
    expr                 go to state 172
    literal              go to state 89


state 171

   48 if_then_else_stmt: TOK_IF expr stmt TOK_ELSE stmt .

    $default  reduce using rule 48 (if_then_else_stmt)


state 172

   57 expr_plus: expr_plus TOK_COMMA expr .
   72 expr: expr . TOK_BITXOR expr
   73     | expr . TOK_SHL expr
   74     | expr . TOK_LE expr
   75     | expr . TOK_LT expr
   76     | expr . TOK_EQ expr
   77     | expr . TOK_GE expr
   78     | expr . TOK_SHR expr
   79     | expr . TOK_GT expr
   80     | expr . TOK_OR expr
   81     | expr . TOK_BITOR expr
   82     | expr . TOK_MINUS expr
   83     | expr . TOK_NE expr
   84     | expr . TOK_DIV expr
   85     | expr . TOK_MULT expr
   86     | expr . TOK_BITAND expr
   87     | expr . TOK_AND expr
   88     | expr . TOK_MOD expr
   89     | expr . TOK_PLUS expr

    TOK_PLUS    shift, and go to state 112
    TOK_MINUS   shift, and go to state 113
    TOK_MULT    shift, and go to state 114
    TOK_DIV     shift, and go to state 115
    TOK_MOD     shift, and go to state 116
    TOK_BITAND  shift, and go to state 117
    TOK_BITOR   shift, and go to state 118
    TOK_BITXOR  shift, and go to state 119
    TOK_SHL     shift, and go to state 120
    TOK_SHR     shift, and go to state 121
    TOK_GT      shift, and go to state 122
    TOK_LT      shift, and go to state 123
    TOK_GE      shift, and go to state 124
    TOK_LE      shift, and go to state 125
    TOK_EQ      shift, and go to state 126
    TOK_NE      shift, and go to state 127
    TOK_AND     shift, and go to state 128
    TOK_OR      shift, and go to state 129

    $default  reduce using rule 57 (expr_plus)
